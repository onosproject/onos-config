// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/diags/diags.proto

package diags

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	admin "github.com/onosproject/onos-config/api/admin"
	device "github.com/onosproject/onos-config/api/types/change/device"
	github_com_onosproject_onos_config_api_types_change_network "github.com/onosproject/onos-config/api/types/change/network"
	network "github.com/onosproject/onos-config/api/types/change/network"
	github_com_onosproject_onos_config_pkg_types_device "github.com/onosproject/onos-config/api/types/device"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// OpStateRequest is a message for specifying GetOpState query parameters.
type OpStateRequest struct {
	// The request is always in the context of a Device ID. If the device does
	// not exist or is disconnected an error will be returned.
	DeviceId string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all paths for the device have been streamed to the client
	Subscribe            bool     `protobuf:"varint,2,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpStateRequest) Reset()         { *m = OpStateRequest{} }
func (m *OpStateRequest) String() string { return proto.CompactTextString(m) }
func (*OpStateRequest) ProtoMessage()    {}
func (*OpStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf204ae8da722ebe, []int{0}
}
func (m *OpStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpStateRequest.Unmarshal(m, b)
}
func (m *OpStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpStateRequest.Marshal(b, m, deterministic)
}
func (m *OpStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpStateRequest.Merge(m, src)
}
func (m *OpStateRequest) XXX_Size() int {
	return xxx_messageInfo_OpStateRequest.Size(m)
}
func (m *OpStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpStateRequest proto.InternalMessageInfo

func (m *OpStateRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *OpStateRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

type OpStateResponse struct {
	// type is the type of the event
	Type admin.Type `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.admin.Type" json:"type,omitempty"`
	// device is the device on which the event occurred
	Pathvalue            *device.PathValue `protobuf:"bytes,2,opt,name=pathvalue,proto3" json:"pathvalue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OpStateResponse) Reset()         { *m = OpStateResponse{} }
func (m *OpStateResponse) String() string { return proto.CompactTextString(m) }
func (*OpStateResponse) ProtoMessage()    {}
func (*OpStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf204ae8da722ebe, []int{1}
}
func (m *OpStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpStateResponse.Unmarshal(m, b)
}
func (m *OpStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpStateResponse.Marshal(b, m, deterministic)
}
func (m *OpStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpStateResponse.Merge(m, src)
}
func (m *OpStateResponse) XXX_Size() int {
	return xxx_messageInfo_OpStateResponse.Size(m)
}
func (m *OpStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpStateResponse proto.InternalMessageInfo

func (m *OpStateResponse) GetType() admin.Type {
	if m != nil {
		return m.Type
	}
	return admin.Type_NONE
}

func (m *OpStateResponse) GetPathvalue() *device.PathValue {
	if m != nil {
		return m.Pathvalue
	}
	return nil
}

// ListNetworkChangeRequest requests a stream of changes and updates to them
// By default, the request requests a stream of all changes that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all changes have been sent and events that occur following the last changes will be
// streamed to the client until the stream is closed.
// If "withoutReplay" is true then only changes that happen after the call will be returned
type ListNetworkChangeRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all devices have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to specify a specific network change - if blank or '*' then select all
	// Can support `*` (match many chars) or '?' (match one char) as wildcard
	ChangeID github_com_onosproject_onos_config_api_types_change_network.ID `protobuf:"bytes,2,opt,name=changeid,proto3,casttype=github.com/onosproject/onos-config/api/types/change/network.ID" json:"changeid,omitempty"`
	// option to request only changes that happen after the call
	WithoutReplay        bool     `protobuf:"varint,3,opt,name=withoutReplay,proto3" json:"withoutReplay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworkChangeRequest) Reset()         { *m = ListNetworkChangeRequest{} }
func (m *ListNetworkChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworkChangeRequest) ProtoMessage()    {}
func (*ListNetworkChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf204ae8da722ebe, []int{2}
}
func (m *ListNetworkChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkChangeRequest.Unmarshal(m, b)
}
func (m *ListNetworkChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkChangeRequest.Marshal(b, m, deterministic)
}
func (m *ListNetworkChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkChangeRequest.Merge(m, src)
}
func (m *ListNetworkChangeRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworkChangeRequest.Size(m)
}
func (m *ListNetworkChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkChangeRequest proto.InternalMessageInfo

func (m *ListNetworkChangeRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListNetworkChangeRequest) GetChangeID() github_com_onosproject_onos_config_api_types_change_network.ID {
	if m != nil {
		return m.ChangeID
	}
	return ""
}

func (m *ListNetworkChangeRequest) GetWithoutReplay() bool {
	if m != nil {
		return m.WithoutReplay
	}
	return false
}

// ListNetworkChangeResponse carries a single network change event
type ListNetworkChangeResponse struct {
	// change is the network change on which the event occurred
	Change               *network.NetworkChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListNetworkChangeResponse) Reset()         { *m = ListNetworkChangeResponse{} }
func (m *ListNetworkChangeResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworkChangeResponse) ProtoMessage()    {}
func (*ListNetworkChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf204ae8da722ebe, []int{3}
}
func (m *ListNetworkChangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkChangeResponse.Unmarshal(m, b)
}
func (m *ListNetworkChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkChangeResponse.Marshal(b, m, deterministic)
}
func (m *ListNetworkChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkChangeResponse.Merge(m, src)
}
func (m *ListNetworkChangeResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworkChangeResponse.Size(m)
}
func (m *ListNetworkChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkChangeResponse proto.InternalMessageInfo

func (m *ListNetworkChangeResponse) GetChange() *network.NetworkChange {
	if m != nil {
		return m.Change
	}
	return nil
}

// ListDeviceChangeRequest requests a stream of changes and updates to them
// By default, the request requests a stream of all changes that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all changes have been sent and events that occur following the last changes will be
// streamed to the client until the stream is closed.
// If "withoutReplay" is true then only changes that happen after the call will be returned
type ListDeviceChangeRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all devices have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to specify a specific device change - if blank or '*' then select all
	// Can support `*` (match many chars) or '?' (match one char) as wildcard
	DeviceID github_com_onosproject_onos_config_pkg_types_device.ID `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3,casttype=github.com/onosproject/onos-config/api/types/device.ID" json:"device_id,omitempty"`
	// device_version is an optional device version
	DeviceVersion github_com_onosproject_onos_config_pkg_types_device.Version `protobuf:"bytes,3,opt,name=device_version,json=deviceVersion,proto3,casttype=github.com/onosproject/onos-config/api/types/device.Version" json:"device_version,omitempty"`
	// option to request only changes that happen after the call
	WithoutReplay        bool     `protobuf:"varint,4,opt,name=withoutReplay,proto3" json:"withoutReplay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDeviceChangeRequest) Reset()         { *m = ListDeviceChangeRequest{} }
func (m *ListDeviceChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ListDeviceChangeRequest) ProtoMessage()    {}
func (*ListDeviceChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf204ae8da722ebe, []int{4}
}
func (m *ListDeviceChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceChangeRequest.Unmarshal(m, b)
}
func (m *ListDeviceChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceChangeRequest.Marshal(b, m, deterministic)
}
func (m *ListDeviceChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceChangeRequest.Merge(m, src)
}
func (m *ListDeviceChangeRequest) XXX_Size() int {
	return xxx_messageInfo_ListDeviceChangeRequest.Size(m)
}
func (m *ListDeviceChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceChangeRequest proto.InternalMessageInfo

func (m *ListDeviceChangeRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListDeviceChangeRequest) GetDeviceID() github_com_onosproject_onos_config_pkg_types_device.ID {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *ListDeviceChangeRequest) GetDeviceVersion() github_com_onosproject_onos_config_pkg_types_device.Version {
	if m != nil {
		return m.DeviceVersion
	}
	return ""
}

func (m *ListDeviceChangeRequest) GetWithoutReplay() bool {
	if m != nil {
		return m.WithoutReplay
	}
	return false
}

// ListDeviceChangeResponse carries a single network change event
type ListDeviceChangeResponse struct {
	// change is the device change on which the event occurred
	Change               *device.DeviceChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListDeviceChangeResponse) Reset()         { *m = ListDeviceChangeResponse{} }
func (m *ListDeviceChangeResponse) String() string { return proto.CompactTextString(m) }
func (*ListDeviceChangeResponse) ProtoMessage()    {}
func (*ListDeviceChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf204ae8da722ebe, []int{5}
}
func (m *ListDeviceChangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceChangeResponse.Unmarshal(m, b)
}
func (m *ListDeviceChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceChangeResponse.Marshal(b, m, deterministic)
}
func (m *ListDeviceChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceChangeResponse.Merge(m, src)
}
func (m *ListDeviceChangeResponse) XXX_Size() int {
	return xxx_messageInfo_ListDeviceChangeResponse.Size(m)
}
func (m *ListDeviceChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceChangeResponse proto.InternalMessageInfo

func (m *ListDeviceChangeResponse) GetChange() *device.DeviceChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func init() {
	proto.RegisterType((*OpStateRequest)(nil), "onos.config.diags.OpStateRequest")
	proto.RegisterType((*OpStateResponse)(nil), "onos.config.diags.OpStateResponse")
	proto.RegisterType((*ListNetworkChangeRequest)(nil), "onos.config.diags.ListNetworkChangeRequest")
	proto.RegisterType((*ListNetworkChangeResponse)(nil), "onos.config.diags.ListNetworkChangeResponse")
	proto.RegisterType((*ListDeviceChangeRequest)(nil), "onos.config.diags.ListDeviceChangeRequest")
	proto.RegisterType((*ListDeviceChangeResponse)(nil), "onos.config.diags.ListDeviceChangeResponse")
}

func init() { proto.RegisterFile("api/diags/diags.proto", fileDescriptor_bf204ae8da722ebe) }

var fileDescriptor_bf204ae8da722ebe = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0x76, 0x6b, 0x29, 0xd9, 0x53, 0x13, 0xe9, 0xa0, 0x34, 0x2e, 0x42, 0xea, 0x52, 0xb0, 0x1a,
	0xdd, 0x2d, 0x11, 0x44, 0x10, 0x2c, 0xc6, 0xd0, 0x12, 0x91, 0x2a, 0x5b, 0xed, 0x8d, 0xa0, 0x6c,
	0x36, 0xd3, 0xcd, 0xf4, 0x67, 0x67, 0xdc, 0x99, 0xa4, 0xe4, 0xd6, 0xc7, 0xf1, 0x51, 0x7c, 0x88,
	0x5c, 0xf8, 0x10, 0x5e, 0xf4, 0x4a, 0x76, 0xce, 0x34, 0xe9, 0x26, 0xdb, 0x12, 0xdb, 0x9b, 0x65,
	0xe7, 0xcc, 0xf9, 0xbe, 0x6f, 0xce, 0x77, 0x0e, 0x07, 0xee, 0x87, 0x82, 0xf9, 0x5d, 0x16, 0xc6,
	0x12, 0xbf, 0x9e, 0x48, 0xb9, 0xe2, 0x64, 0x85, 0x27, 0x5c, 0x7a, 0x11, 0x4f, 0x0e, 0x58, 0xec,
	0xe9, 0x0b, 0xe7, 0x5e, 0xcc, 0x63, 0xae, 0x6f, 0xfd, 0xec, 0x0f, 0x13, 0x9d, 0x57, 0x31, 0x53,
	0xbd, 0x7e, 0xc7, 0x8b, 0xf8, 0x89, 0x9f, 0x61, 0x44, 0xca, 0x0f, 0x69, 0xa4, 0xf4, 0xff, 0x73,
	0xc4, 0xfb, 0x99, 0x44, 0xd8, 0x3d, 0x61, 0x09, 0x7e, 0x0d, 0x72, 0x7b, 0x4e, 0xa4, 0x1a, 0x0a,
	0x2a, 0xfd, 0xa8, 0x17, 0x26, 0x31, 0xf5, 0xbb, 0x74, 0xc0, 0x22, 0x8a, 0x31, 0xc3, 0xb3, 0x73,
	0x1d, 0x9e, 0x84, 0xaa, 0x53, 0x9e, 0x1e, 0x5d, 0x24, 0x72, 0xdf, 0x43, 0xe5, 0xa3, 0xd8, 0x53,
	0xa1, 0xa2, 0x01, 0xfd, 0xd1, 0xa7, 0x52, 0x11, 0x07, 0x4a, 0x28, 0xd8, 0xee, 0x56, 0xad, 0x35,
	0x6b, 0xc3, 0x0e, 0xc6, 0x67, 0xf2, 0x10, 0x6c, 0xd9, 0xef, 0xc8, 0x28, 0x65, 0x1d, 0x5a, 0x5d,
	0x58, 0xb3, 0x36, 0x4a, 0xc1, 0x24, 0xe0, 0xfe, 0xb4, 0xe0, 0xee, 0x98, 0x4c, 0x0a, 0x9e, 0x48,
	0x4a, 0xea, 0xb0, 0x98, 0xc9, 0x69, 0xa6, 0x4a, 0x63, 0xd5, 0xbb, 0x68, 0x31, 0x1a, 0xf3, 0x79,
	0x28, 0x68, 0xa0, 0x93, 0x48, 0x13, 0x6c, 0x11, 0xaa, 0xde, 0x20, 0x3c, 0xee, 0x23, 0xfd, 0x72,
	0x63, 0x3d, 0x87, 0xc0, 0x42, 0x3c, 0x7c, 0x8f, 0xf7, 0x29, 0x54, 0xbd, 0xfd, 0x2c, 0x37, 0x98,
	0xc0, 0xdc, 0xdf, 0x16, 0x54, 0x3f, 0x30, 0xa9, 0x76, 0xb1, 0xd8, 0x77, 0x1a, 0x71, 0x5e, 0x5b,
	0xee, 0xfd, 0xd6, 0xd4, 0xfb, 0xc9, 0x21, 0x94, 0x50, 0x80, 0x75, 0xb5, 0xba, 0xdd, 0xdc, 0xfd,
	0x33, 0xaa, 0x95, 0x90, 0xa2, 0xdd, 0x3a, 0x1b, 0xd5, 0xde, 0xdc, 0xc0, 0x76, 0xaf, 0xdd, 0x0a,
	0xc6, 0xfc, 0x64, 0x1d, 0xca, 0xa7, 0x4c, 0xf5, 0x78, 0x5f, 0x05, 0x54, 0x1c, 0x87, 0xc3, 0xea,
	0x6d, 0xfd, 0x9a, 0x7c, 0xd0, 0xfd, 0x06, 0x0f, 0x0a, 0x6a, 0x31, 0xd6, 0xbe, 0x85, 0x25, 0xa4,
	0xd3, 0x95, 0x2c, 0x37, 0x9e, 0x14, 0x59, 0x75, 0x2e, 0x9e, 0xa7, 0x30, 0x40, 0xf7, 0xd7, 0x02,
	0xac, 0x66, 0x02, 0x2d, 0x6d, 0xe8, 0xff, 0x78, 0x15, 0x81, 0x8d, 0x5d, 0xf8, 0x3e, 0x36, 0x6b,
	0x3b, 0x33, 0x0b, 0x99, 0xb4, 0x59, 0x2f, 0xe7, 0x30, 0x4b, 0x1c, 0xc5, 0xc6, 0x2c, 0xd3, 0xd3,
	0xcc, 0xa4, 0xf1, 0xb8, 0x1d, 0x40, 0xc5, 0x88, 0x0c, 0x68, 0x2a, 0x19, 0x4f, 0xb4, 0x4b, 0x76,
	0x73, 0xeb, 0x6c, 0x54, 0x7b, 0x7d, 0x1d, 0xf6, 0x7d, 0xa4, 0x09, 0xca, 0x78, 0x36, 0xc7, 0xd9,
	0x66, 0x2c, 0x16, 0x35, 0xe3, 0x2b, 0x0e, 0x56, 0xde, 0x2b, 0xd3, 0x8b, 0xad, 0xa9, 0x5e, 0x3c,
	0xbe, 0x62, 0x6c, 0x73, 0x04, 0x06, 0xd6, 0xf8, 0x6b, 0x41, 0x19, 0x43, 0x7b, 0x34, 0xcd, 0xee,
	0x89, 0x04, 0x32, 0xd3, 0x7b, 0x49, 0xea, 0xde, 0xcc, 0x92, 0xf2, 0x2e, 0x1b, 0x77, 0xe7, 0xd9,
	0x7c, 0xc9, 0x58, 0x83, 0x7b, 0x6b, 0xd3, 0x22, 0x02, 0x56, 0xa6, 0x6b, 0x94, 0xe4, 0xe9, 0x25,
	0x34, 0x05, 0x53, 0xe3, 0xd4, 0xe7, 0xca, 0x9d, 0x28, 0x36, 0x28, 0xdc, 0x31, 0x3b, 0xa3, 0x95,
	0x25, 0x93, 0x2f, 0x00, 0x3b, 0x54, 0x99, 0x10, 0x79, 0x54, 0x40, 0x97, 0xdf, 0x57, 0x8e, 0x7b,
	0x55, 0x0a, 0x0a, 0x6d, 0x5a, 0x9d, 0x25, 0xbd, 0xee, 0x5e, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x2f, 0xee, 0xc8, 0x0f, 0xfb, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChangeServiceClient is the client API for ChangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChangeServiceClient interface {
	// List gets a stream of network change add/update/remove events for network
	// changes matching changeid
	ListNetworkChanges(ctx context.Context, in *ListNetworkChangeRequest, opts ...grpc.CallOption) (ChangeService_ListNetworkChangesClient, error)
	// List gets a stream of device change add/update/remove events for device
	// changes matching changeid
	ListDeviceChanges(ctx context.Context, in *ListDeviceChangeRequest, opts ...grpc.CallOption) (ChangeService_ListDeviceChangesClient, error)
}

type changeServiceClient struct {
	cc *grpc.ClientConn
}

func NewChangeServiceClient(cc *grpc.ClientConn) ChangeServiceClient {
	return &changeServiceClient{cc}
}

func (c *changeServiceClient) ListNetworkChanges(ctx context.Context, in *ListNetworkChangeRequest, opts ...grpc.CallOption) (ChangeService_ListNetworkChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChangeService_serviceDesc.Streams[0], "/onos.config.diags.ChangeService/ListNetworkChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &changeServiceListNetworkChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChangeService_ListNetworkChangesClient interface {
	Recv() (*ListNetworkChangeResponse, error)
	grpc.ClientStream
}

type changeServiceListNetworkChangesClient struct {
	grpc.ClientStream
}

func (x *changeServiceListNetworkChangesClient) Recv() (*ListNetworkChangeResponse, error) {
	m := new(ListNetworkChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *changeServiceClient) ListDeviceChanges(ctx context.Context, in *ListDeviceChangeRequest, opts ...grpc.CallOption) (ChangeService_ListDeviceChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChangeService_serviceDesc.Streams[1], "/onos.config.diags.ChangeService/ListDeviceChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &changeServiceListDeviceChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChangeService_ListDeviceChangesClient interface {
	Recv() (*ListDeviceChangeResponse, error)
	grpc.ClientStream
}

type changeServiceListDeviceChangesClient struct {
	grpc.ClientStream
}

func (x *changeServiceListDeviceChangesClient) Recv() (*ListDeviceChangeResponse, error) {
	m := new(ListDeviceChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChangeServiceServer is the server API for ChangeService service.
type ChangeServiceServer interface {
	// List gets a stream of network change add/update/remove events for network
	// changes matching changeid
	ListNetworkChanges(*ListNetworkChangeRequest, ChangeService_ListNetworkChangesServer) error
	// List gets a stream of device change add/update/remove events for device
	// changes matching changeid
	ListDeviceChanges(*ListDeviceChangeRequest, ChangeService_ListDeviceChangesServer) error
}

// UnimplementedChangeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChangeServiceServer struct {
}

func (*UnimplementedChangeServiceServer) ListNetworkChanges(req *ListNetworkChangeRequest, srv ChangeService_ListNetworkChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworkChanges not implemented")
}
func (*UnimplementedChangeServiceServer) ListDeviceChanges(req *ListDeviceChangeRequest, srv ChangeService_ListDeviceChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeviceChanges not implemented")
}

func RegisterChangeServiceServer(s *grpc.Server, srv ChangeServiceServer) {
	s.RegisterService(&_ChangeService_serviceDesc, srv)
}

func _ChangeService_ListNetworkChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNetworkChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChangeServiceServer).ListNetworkChanges(m, &changeServiceListNetworkChangesServer{stream})
}

type ChangeService_ListNetworkChangesServer interface {
	Send(*ListNetworkChangeResponse) error
	grpc.ServerStream
}

type changeServiceListNetworkChangesServer struct {
	grpc.ServerStream
}

func (x *changeServiceListNetworkChangesServer) Send(m *ListNetworkChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChangeService_ListDeviceChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeviceChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChangeServiceServer).ListDeviceChanges(m, &changeServiceListDeviceChangesServer{stream})
}

type ChangeService_ListDeviceChangesServer interface {
	Send(*ListDeviceChangeResponse) error
	grpc.ServerStream
}

type changeServiceListDeviceChangesServer struct {
	grpc.ServerStream
}

func (x *changeServiceListDeviceChangesServer) Send(m *ListDeviceChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.config.diags.ChangeService",
	HandlerType: (*ChangeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNetworkChanges",
			Handler:       _ChangeService_ListNetworkChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDeviceChanges",
			Handler:       _ChangeService_ListDeviceChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/diags/diags.proto",
}

// OpStateDiagsClient is the client API for OpStateDiags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpStateDiagsClient interface {
	// GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices.
	// If subscribe is true keep on streaming after the initial set are finished
	GetOpState(ctx context.Context, in *OpStateRequest, opts ...grpc.CallOption) (OpStateDiags_GetOpStateClient, error)
}

type opStateDiagsClient struct {
	cc *grpc.ClientConn
}

func NewOpStateDiagsClient(cc *grpc.ClientConn) OpStateDiagsClient {
	return &opStateDiagsClient{cc}
}

func (c *opStateDiagsClient) GetOpState(ctx context.Context, in *OpStateRequest, opts ...grpc.CallOption) (OpStateDiags_GetOpStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpStateDiags_serviceDesc.Streams[0], "/onos.config.diags.OpStateDiags/GetOpState", opts...)
	if err != nil {
		return nil, err
	}
	x := &opStateDiagsGetOpStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpStateDiags_GetOpStateClient interface {
	Recv() (*OpStateResponse, error)
	grpc.ClientStream
}

type opStateDiagsGetOpStateClient struct {
	grpc.ClientStream
}

func (x *opStateDiagsGetOpStateClient) Recv() (*OpStateResponse, error) {
	m := new(OpStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpStateDiagsServer is the server API for OpStateDiags service.
type OpStateDiagsServer interface {
	// GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices.
	// If subscribe is true keep on streaming after the initial set are finished
	GetOpState(*OpStateRequest, OpStateDiags_GetOpStateServer) error
}

// UnimplementedOpStateDiagsServer can be embedded to have forward compatible implementations.
type UnimplementedOpStateDiagsServer struct {
}

func (*UnimplementedOpStateDiagsServer) GetOpState(req *OpStateRequest, srv OpStateDiags_GetOpStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOpState not implemented")
}

func RegisterOpStateDiagsServer(s *grpc.Server, srv OpStateDiagsServer) {
	s.RegisterService(&_OpStateDiags_serviceDesc, srv)
}

func _OpStateDiags_GetOpState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpStateDiagsServer).GetOpState(m, &opStateDiagsGetOpStateServer{stream})
}

type OpStateDiags_GetOpStateServer interface {
	Send(*OpStateResponse) error
	grpc.ServerStream
}

type opStateDiagsGetOpStateServer struct {
	grpc.ServerStream
}

func (x *opStateDiagsGetOpStateServer) Send(m *OpStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OpStateDiags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.config.diags.OpStateDiags",
	HandlerType: (*OpStateDiagsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOpState",
			Handler:       _OpStateDiags_GetOpState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/diags/diags.proto",
}
