// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/types/change/types.proto

package change

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Phase is the phase of a NetworkChange
type Phase int32

const (
	// CHANGE indicates the change has been requested
	Phase_CHANGE Phase = 0
	// ROLLBACK indicates a rollback has been requested for the change
	Phase_ROLLBACK Phase = 1
)

var Phase_name = map[int32]string{
	0: "CHANGE",
	1: "ROLLBACK",
}

var Phase_value = map[string]int32{
	"CHANGE":   0,
	"ROLLBACK": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0083573634b6757f, []int{0}
}

// State is the state of a phase
type State int32

const (
	// PENDING indicates the phase is pending
	State_PENDING State = 0
	// RUNNING indicates the phase is in progress
	State_RUNNING State = 1
	// COMPLETE indicates the phase is complete
	State_COMPLETE State = 2
	// FAILED indicates the phase failed
	State_FAILED State = 3
)

var State_name = map[int32]string{
	0: "PENDING",
	1: "RUNNING",
	2: "COMPLETE",
	3: "FAILED",
}

var State_value = map[string]int32{
	"PENDING":  0,
	"RUNNING":  1,
	"COMPLETE": 2,
	"FAILED":   3,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0083573634b6757f, []int{1}
}

// Reason is a reason for a FAILED state
type Reason int32

const (
	// NONE indicates no error has occurred
	Reason_NONE Reason = 0
	// ERROR indicates an error occurred when applying the change
	Reason_ERROR Reason = 1
)

var Reason_name = map[int32]string{
	0: "NONE",
	1: "ERROR",
}

var Reason_value = map[string]int32{
	"NONE":  0,
	"ERROR": 1,
}

func (x Reason) String() string {
	return proto.EnumName(Reason_name, int32(x))
}

func (Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0083573634b6757f, []int{2}
}

// Status is the status of a NetworkChange
type Status struct {
	// 'phase' is the current phase of the NetworkChange
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=onos.config.change.Phase" json:"phase,omitempty"`
	// 'state' is the state of the change within a Phase
	State State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.change.State" json:"state,omitempty"`
	// 'reason' is a failure reason
	Reason Reason `protobuf:"varint,3,opt,name=reason,proto3,enum=onos.config.change.Reason" json:"reason,omitempty"`
	// message is a result message
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083573634b6757f, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_CHANGE
}

func (m *Status) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *Status) GetReason() Reason {
	if m != nil {
		return m.Reason
	}
	return Reason_NONE
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("onos.config.change.Phase", Phase_name, Phase_value)
	proto.RegisterEnum("onos.config.change.State", State_name, State_value)
	proto.RegisterEnum("onos.config.change.Reason", Reason_name, Reason_value)
	proto.RegisterType((*Status)(nil), "onos.config.change.Status")
}

func init() { proto.RegisterFile("api/types/change/types.proto", fileDescriptor_0083573634b6757f) }

var fileDescriptor_0083573634b6757f = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0xb6, 0x49, 0xdb, 0x0b, 0x42, 0x96, 0x27, 0x83, 0xc0, 0x2a, 0x4c, 0x55, 0x87,
	0x54, 0x2a, 0x23, 0x53, 0x7f, 0x4c, 0xa9, 0x08, 0x4e, 0x65, 0xe0, 0x01, 0x4c, 0x65, 0xda, 0x0e,
	0xc4, 0x51, 0x6d, 0x06, 0xde, 0x82, 0xc7, 0xe1, 0x11, 0x18, 0x3b, 0x32, 0xa2, 0xe6, 0x45, 0x90,
	0x13, 0x98, 0x80, 0xf1, 0xe8, 0x7e, 0xdf, 0xd1, 0xd1, 0x85, 0x63, 0x95, 0xaf, 0xfb, 0xee, 0x25,
	0xd7, 0xb6, 0xbf, 0x58, 0xa9, 0x6c, 0xa9, 0xab, 0x10, 0xe7, 0x1b, 0xe3, 0x0c, 0x21, 0x26, 0x33,
	0x36, 0x5e, 0x98, 0xec, 0x71, 0xbd, 0x8c, 0xab, 0xfb, 0xd9, 0x1b, 0x82, 0xe8, 0xd6, 0x29, 0xf7,
	0x6c, 0x49, 0x1f, 0xc2, 0x7c, 0xa5, 0xac, 0xa6, 0xa8, 0x83, 0xba, 0x07, 0x83, 0xc3, 0xf8, 0x37,
	0x1e, 0xcf, 0x3d, 0x20, 0x2b, 0xce, 0x0b, 0xd6, 0x29, 0xa7, 0x69, 0xed, 0x7f, 0xc1, 0x77, 0x6b,
	0x59, 0x71, 0x64, 0x00, 0xd1, 0x46, 0x2b, 0x6b, 0x32, 0x5a, 0x2f, 0x8d, 0xa3, 0xbf, 0x0c, 0x59,
	0x12, 0xf2, 0x9b, 0x24, 0x14, 0x9a, 0x4f, 0xda, 0x5a, 0xb5, 0xd4, 0xb4, 0xd1, 0x41, 0xdd, 0xb6,
	0xfc, 0x89, 0xbd, 0x53, 0x08, 0xcb, 0x39, 0x04, 0x20, 0x1a, 0x5f, 0x0d, 0xc5, 0x94, 0xe3, 0x80,
	0xec, 0x43, 0x4b, 0xa6, 0x49, 0x32, 0x1a, 0x8e, 0xaf, 0x31, 0xea, 0x5d, 0x40, 0x58, 0x0e, 0x20,
	0x7b, 0xd0, 0x9c, 0x73, 0x31, 0x99, 0x89, 0x29, 0x0e, 0x7c, 0x90, 0xf7, 0x42, 0xf8, 0x80, 0xbc,
	0x30, 0x4e, 0x6f, 0xe6, 0x09, 0xbf, 0xe3, 0xb8, 0xe6, 0xab, 0x2e, 0x87, 0xb3, 0x84, 0x4f, 0x70,
	0xbd, 0x77, 0x02, 0x51, 0xb5, 0x85, 0xb4, 0xa0, 0x21, 0x52, 0xe1, 0xeb, 0xdb, 0x10, 0x72, 0x29,
	0x53, 0x89, 0xd1, 0x88, 0xbe, 0xef, 0x18, 0xda, 0xee, 0x18, 0xfa, 0xdc, 0x31, 0xf4, 0x5a, 0xb0,
	0x60, 0x5b, 0xb0, 0xe0, 0xa3, 0x60, 0xc1, 0x43, 0x54, 0xbe, 0xfb, 0xfc, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0xe7, 0x06, 0x0e, 0x42, 0x8e, 0x01, 0x00, 0x00,
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Reason != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Phase != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovTypes(uint64(m.Phase))
	}
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.Reason != 0 {
		n += 1 + sovTypes(uint64(m.Reason))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= Reason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
