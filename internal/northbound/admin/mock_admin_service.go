// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package pluginregistry is a generated GoMock package.
package admin

import (
	context "context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "github.com/onosproject/onos-api/go/onos/config/admin"
)

// MockConfigAdminServiceClient is a mock of ConfigAdminServiceClient interface.
type MockConfigAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminServiceClientMockRecorder
}

// MockConfigAdminServiceClientMockRecorder is the mock recorder for MockConfigAdminServiceClient.
type MockConfigAdminServiceClientMockRecorder struct {
	mock *MockConfigAdminServiceClient
}

// NewMockConfigAdminServiceClient creates a new mock instance.
func NewMockConfigAdminServiceClient(ctrl *gomock.Controller) *MockConfigAdminServiceClient {
	mock := &MockConfigAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminServiceClient) EXPECT() *MockConfigAdminServiceClientMockRecorder {
	return m.recorder
}

// LeafSelectionQuery mocks base method.
func (m *MockConfigAdminServiceClient) LeafSelectionQuery(ctx context.Context, in *admin.LeafSelectionQueryRequest, opts ...grpc.CallOption) (*admin.LeafSelectionQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeafSelectionQuery", varargs...)
	ret0, _ := ret[0].(*admin.LeafSelectionQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeafSelectionQuery indicates an expected call of LeafSelectionQuery.
func (mr *MockConfigAdminServiceClientMockRecorder) LeafSelectionQuery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafSelectionQuery", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).LeafSelectionQuery), varargs...)
}

// ListRegisteredModels mocks base method.
func (m *MockConfigAdminServiceClient) ListRegisteredModels(ctx context.Context, in *admin.ListModelsRequest, opts ...grpc.CallOption) (admin.ConfigAdminService_ListRegisteredModelsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredModels", varargs...)
	ret0, _ := ret[0].(admin.ConfigAdminService_ListRegisteredModelsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels.
func (mr *MockConfigAdminServiceClientMockRecorder) ListRegisteredModels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).ListRegisteredModels), varargs...)
}

// RollbackTransaction mocks base method.
func (m *MockConfigAdminServiceClient) RollbackTransaction(ctx context.Context, in *admin.RollbackRequest, opts ...grpc.CallOption) (*admin.RollbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollbackTransaction", varargs...)
	ret0, _ := ret[0].(*admin.RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockConfigAdminServiceClientMockRecorder) RollbackTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).RollbackTransaction), varargs...)
}

// MockConfigAdminService_ListRegisteredModelsClient is a mock of ConfigAdminService_ListRegisteredModelsClient interface.
type MockConfigAdminService_ListRegisteredModelsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListRegisteredModelsClientMockRecorder
}

// MockConfigAdminService_ListRegisteredModelsClientMockRecorder is the mock recorder for MockConfigAdminService_ListRegisteredModelsClient.
type MockConfigAdminService_ListRegisteredModelsClientMockRecorder struct {
	mock *MockConfigAdminService_ListRegisteredModelsClient
}

// NewMockConfigAdminService_ListRegisteredModelsClient creates a new mock instance.
func NewMockConfigAdminService_ListRegisteredModelsClient(ctrl *gomock.Controller) *MockConfigAdminService_ListRegisteredModelsClient {
	mock := &MockConfigAdminService_ListRegisteredModelsClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListRegisteredModelsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminService_ListRegisteredModelsClient) EXPECT() *MockConfigAdminService_ListRegisteredModelsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Recv() (*admin.ModelPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.ModelPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Trailer))
}

// MockConfigAdminServiceServer is a mock of ConfigAdminServiceServer interface.
type MockConfigAdminServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminServiceServerMockRecorder
}

// MockConfigAdminServiceServerMockRecorder is the mock recorder for MockConfigAdminServiceServer.
type MockConfigAdminServiceServerMockRecorder struct {
	mock *MockConfigAdminServiceServer
}

// NewMockConfigAdminServiceServer creates a new mock instance.
func NewMockConfigAdminServiceServer(ctrl *gomock.Controller) *MockConfigAdminServiceServer {
	mock := &MockConfigAdminServiceServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminServiceServer) EXPECT() *MockConfigAdminServiceServerMockRecorder {
	return m.recorder
}

// LeafSelectionQuery mocks base method.
func (m *MockConfigAdminServiceServer) LeafSelectionQuery(arg0 context.Context, arg1 *admin.LeafSelectionQueryRequest) (*admin.LeafSelectionQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeafSelectionQuery", arg0, arg1)
	ret0, _ := ret[0].(*admin.LeafSelectionQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeafSelectionQuery indicates an expected call of LeafSelectionQuery.
func (mr *MockConfigAdminServiceServerMockRecorder) LeafSelectionQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafSelectionQuery", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).LeafSelectionQuery), arg0, arg1)
}

// ListRegisteredModels mocks base method.
func (m *MockConfigAdminServiceServer) ListRegisteredModels(arg0 *admin.ListModelsRequest, arg1 admin.ConfigAdminService_ListRegisteredModelsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredModels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels.
func (mr *MockConfigAdminServiceServerMockRecorder) ListRegisteredModels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).ListRegisteredModels), arg0, arg1)
}

// RollbackTransaction mocks base method.
func (m *MockConfigAdminServiceServer) RollbackTransaction(arg0 context.Context, arg1 *admin.RollbackRequest) (*admin.RollbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0, arg1)
	ret0, _ := ret[0].(*admin.RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockConfigAdminServiceServerMockRecorder) RollbackTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).RollbackTransaction), arg0, arg1)
}

// MockConfigAdminService_ListRegisteredModelsServer is a mock of ConfigAdminService_ListRegisteredModelsServer interface.
type MockConfigAdminService_ListRegisteredModelsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListRegisteredModelsServerMockRecorder
}

// MockConfigAdminService_ListRegisteredModelsServerMockRecorder is the mock recorder for MockConfigAdminService_ListRegisteredModelsServer.
type MockConfigAdminService_ListRegisteredModelsServerMockRecorder struct {
	mock *MockConfigAdminService_ListRegisteredModelsServer
}

// NewMockConfigAdminService_ListRegisteredModelsServer creates a new mock instance.
func NewMockConfigAdminService_ListRegisteredModelsServer(ctrl *gomock.Controller) *MockConfigAdminService_ListRegisteredModelsServer {
	mock := &MockConfigAdminService_ListRegisteredModelsServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListRegisteredModelsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminService_ListRegisteredModelsServer) EXPECT() *MockConfigAdminService_ListRegisteredModelsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) Send(arg0 *admin.ModelPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SetTrailer), arg0)
}
