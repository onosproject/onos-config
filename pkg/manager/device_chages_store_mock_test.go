// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onosproject/onos-config/pkg/store/change/device (interfaces: Store)

// Package mock_device is a generated GoMock package.
package manager

import (
	gomock "github.com/golang/mock/gomock"
	device "github.com/onosproject/onos-config/pkg/types/change/device"
	device0 "github.com/onosproject/onos-topo/pkg/northbound/device"
	reflect "reflect"
)

// MockDeviceChangesStore is a mock of Store interface
type MockDeviceChangesStore struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceChangesStoreMockRecorder
}

// MockDeviceChangesStoreMockRecorder is the mock recorder for MockDeviceChangesStore
type MockDeviceChangesStoreMockRecorder struct {
	mock *MockDeviceChangesStore
}

// NewMockDeviceChangesStore creates a new mock instance
func NewMockDeviceChangesStore(ctrl *gomock.Controller) *MockDeviceChangesStore {
	mock := &MockDeviceChangesStore{ctrl: ctrl}
	mock.recorder = &MockDeviceChangesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceChangesStore) EXPECT() *MockDeviceChangesStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDeviceChangesStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDeviceChangesStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeviceChangesStore)(nil).Close))
}

// Create mocks base method
func (m *MockDeviceChangesStore) Create(arg0 *device.DeviceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDeviceChangesStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceChangesStore)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockDeviceChangesStore) Delete(arg0 *device.DeviceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeviceChangesStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeviceChangesStore)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockDeviceChangesStore) Get(arg0 device.ID) (*device.DeviceChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*device.DeviceChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDeviceChangesStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeviceChangesStore)(nil).Get), arg0)
}

// LastIndex mocks base method
func (m *MockDeviceChangesStore) LastIndex(arg0 device0.ID) (device.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastIndex", arg0)
	ret0, _ := ret[0].(device.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastIndex indicates an expected call of LastIndex
func (mr *MockDeviceChangesStoreMockRecorder) LastIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastIndex", reflect.TypeOf((*MockDeviceChangesStore)(nil).LastIndex), arg0)
}

// List mocks base method
func (m *MockDeviceChangesStore) List(arg0 device0.ID, arg1 chan<- *device.DeviceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockDeviceChangesStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeviceChangesStore)(nil).List), arg0, arg1)
}

// Replay mocks base method
func (m *MockDeviceChangesStore) Replay(arg0 device0.ID, arg1 device.Index, arg2 chan<- *device.DeviceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replay", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replay indicates an expected call of Replay
func (mr *MockDeviceChangesStoreMockRecorder) Replay(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replay", reflect.TypeOf((*MockDeviceChangesStore)(nil).Replay), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockDeviceChangesStore) Update(arg0 *device.DeviceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDeviceChangesStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceChangesStore)(nil).Update), arg0)
}

// Watch mocks base method
func (m *MockDeviceChangesStore) Watch(arg0 device0.ID, arg1 chan<- *device.DeviceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (mr *MockDeviceChangesStoreMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDeviceChangesStore)(nil).Watch), arg0, arg1)
}
