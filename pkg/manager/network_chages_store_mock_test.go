// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onosproject/onos-config/pkg/store/change/network (interfaces: Store)

// Package mock_network is a generated GoMock package.
package manager

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/onosproject/onos-config/pkg/types/change/network"
	reflect "reflect"
)

// MockNetworkChangesStore is a mock of Store interface
type MockNetworkChangesStore struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkChangesStoreMockRecorder
}

// MockNetworkChangesStoreMockRecorder is the mock recorder for MockNetworkChangesStore
type MockNetworkChangesStoreMockRecorder struct {
	mock *MockNetworkChangesStore
}

// NewMockNetworkChangesStore creates a new mock instance
func NewMockNetworkChangesStore(ctrl *gomock.Controller) *MockNetworkChangesStore {
	mock := &MockNetworkChangesStore{ctrl: ctrl}
	mock.recorder = &MockNetworkChangesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkChangesStore) EXPECT() *MockNetworkChangesStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNetworkChangesStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNetworkChangesStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNetworkChangesStore)(nil).Close))
}

// Create mocks base method
func (m *MockNetworkChangesStore) Create(arg0 *network.NetworkChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNetworkChangesStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkChangesStore)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockNetworkChangesStore) Delete(arg0 *network.NetworkChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkChangesStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkChangesStore)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockNetworkChangesStore) Get(arg0 network.ID) (*network.NetworkChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*network.NetworkChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkChangesStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkChangesStore)(nil).Get), arg0)
}

// GetByIndex mocks base method
func (m *MockNetworkChangesStore) GetByIndex(arg0 network.Index) (*network.NetworkChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0)
	ret0, _ := ret[0].(*network.NetworkChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex
func (mr *MockNetworkChangesStoreMockRecorder) GetByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockNetworkChangesStore)(nil).GetByIndex), arg0)
}

// LastIndex mocks base method
func (m *MockNetworkChangesStore) LastIndex() (network.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastIndex")
	ret0, _ := ret[0].(network.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastIndex indicates an expected call of LastIndex
func (mr *MockNetworkChangesStoreMockRecorder) LastIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastIndex", reflect.TypeOf((*MockNetworkChangesStore)(nil).LastIndex))
}

// List mocks base method
func (m *MockNetworkChangesStore) List(arg0 chan<- *network.NetworkChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockNetworkChangesStoreMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkChangesStore)(nil).List), arg0)
}

// Update mocks base method
func (m *MockNetworkChangesStore) Update(arg0 *network.NetworkChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockNetworkChangesStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkChangesStore)(nil).Update), arg0)
}

// Watch mocks base method
func (m *MockNetworkChangesStore) Watch(arg0 chan<- *network.NetworkChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkChangesStoreMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkChangesStore)(nil).Watch), arg0)
}
