// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../onos-api/go/onos/config/admin/admin.pb.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "github.com/onosproject/onos-api/go/onos/config/admin"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockConfigAdminServiceClient is a mock of ConfigAdminServiceClient interface.
type MockConfigAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminServiceClientMockRecorder
}

// MockConfigAdminServiceClientMockRecorder is the mock recorder for MockConfigAdminServiceClient.
type MockConfigAdminServiceClientMockRecorder struct {
	mock *MockConfigAdminServiceClient
}

// NewMockConfigAdminServiceClient creates a new mock instance.
func NewMockConfigAdminServiceClient(ctrl *gomock.Controller) *MockConfigAdminServiceClient {
	mock := &MockConfigAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminServiceClient) EXPECT() *MockConfigAdminServiceClientMockRecorder {
	return m.recorder
}

// LeafSelectionQuery mocks base method.
func (m *MockConfigAdminServiceClient) LeafSelectionQuery(ctx context.Context, in *admin.LeafSelectionQueryRequest, opts ...grpc.CallOption) (*admin.LeafSelectionQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeafSelectionQuery", varargs...)
	ret0, _ := ret[0].(*admin.LeafSelectionQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeafSelectionQuery indicates an expected call of LeafSelectionQuery.
func (mr *MockConfigAdminServiceClientMockRecorder) LeafSelectionQuery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafSelectionQuery", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).LeafSelectionQuery), varargs...)
}

// ListRegisteredModels mocks base method.
func (m *MockConfigAdminServiceClient) ListRegisteredModels(ctx context.Context, in *admin.ListModelsRequest, opts ...grpc.CallOption) (admin.ConfigAdminService_ListRegisteredModelsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegisteredModels", varargs...)
	ret0, _ := ret[0].(admin.ConfigAdminService_ListRegisteredModelsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels.
func (mr *MockConfigAdminServiceClientMockRecorder) ListRegisteredModels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).ListRegisteredModels), varargs...)
}

// RollbackTransaction mocks base method.
func (m *MockConfigAdminServiceClient) RollbackTransaction(ctx context.Context, in *admin.RollbackRequest, opts ...grpc.CallOption) (*admin.RollbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollbackTransaction", varargs...)
	ret0, _ := ret[0].(*admin.RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockConfigAdminServiceClientMockRecorder) RollbackTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockConfigAdminServiceClient)(nil).RollbackTransaction), varargs...)
}

// MockConfigAdminService_ListRegisteredModelsClient is a mock of ConfigAdminService_ListRegisteredModelsClient interface.
type MockConfigAdminService_ListRegisteredModelsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListRegisteredModelsClientMockRecorder
}

// MockConfigAdminService_ListRegisteredModelsClientMockRecorder is the mock recorder for MockConfigAdminService_ListRegisteredModelsClient.
type MockConfigAdminService_ListRegisteredModelsClientMockRecorder struct {
	mock *MockConfigAdminService_ListRegisteredModelsClient
}

// NewMockConfigAdminService_ListRegisteredModelsClient creates a new mock instance.
func NewMockConfigAdminService_ListRegisteredModelsClient(ctrl *gomock.Controller) *MockConfigAdminService_ListRegisteredModelsClient {
	mock := &MockConfigAdminService_ListRegisteredModelsClient{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListRegisteredModelsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminService_ListRegisteredModelsClient) EXPECT() *MockConfigAdminService_ListRegisteredModelsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Recv() (*admin.ModelPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.ModelPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigAdminService_ListRegisteredModelsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsClient)(nil).Trailer))
}

// MockConfigAdminServiceServer is a mock of ConfigAdminServiceServer interface.
type MockConfigAdminServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminServiceServerMockRecorder
}

// MockConfigAdminServiceServerMockRecorder is the mock recorder for MockConfigAdminServiceServer.
type MockConfigAdminServiceServerMockRecorder struct {
	mock *MockConfigAdminServiceServer
}

// NewMockConfigAdminServiceServer creates a new mock instance.
func NewMockConfigAdminServiceServer(ctrl *gomock.Controller) *MockConfigAdminServiceServer {
	mock := &MockConfigAdminServiceServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminServiceServer) EXPECT() *MockConfigAdminServiceServerMockRecorder {
	return m.recorder
}

// LeafSelectionQuery mocks base method.
func (m *MockConfigAdminServiceServer) LeafSelectionQuery(arg0 context.Context, arg1 *admin.LeafSelectionQueryRequest) (*admin.LeafSelectionQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeafSelectionQuery", arg0, arg1)
	ret0, _ := ret[0].(*admin.LeafSelectionQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeafSelectionQuery indicates an expected call of LeafSelectionQuery.
func (mr *MockConfigAdminServiceServerMockRecorder) LeafSelectionQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafSelectionQuery", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).LeafSelectionQuery), arg0, arg1)
}

// ListRegisteredModels mocks base method.
func (m *MockConfigAdminServiceServer) ListRegisteredModels(arg0 *admin.ListModelsRequest, arg1 admin.ConfigAdminService_ListRegisteredModelsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredModels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels.
func (mr *MockConfigAdminServiceServerMockRecorder) ListRegisteredModels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).ListRegisteredModels), arg0, arg1)
}

// RollbackTransaction mocks base method.
func (m *MockConfigAdminServiceServer) RollbackTransaction(arg0 context.Context, arg1 *admin.RollbackRequest) (*admin.RollbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0, arg1)
	ret0, _ := ret[0].(*admin.RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockConfigAdminServiceServerMockRecorder) RollbackTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockConfigAdminServiceServer)(nil).RollbackTransaction), arg0, arg1)
}

// MockConfigAdminService_ListRegisteredModelsServer is a mock of ConfigAdminService_ListRegisteredModelsServer interface.
type MockConfigAdminService_ListRegisteredModelsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAdminService_ListRegisteredModelsServerMockRecorder
}

// MockConfigAdminService_ListRegisteredModelsServerMockRecorder is the mock recorder for MockConfigAdminService_ListRegisteredModelsServer.
type MockConfigAdminService_ListRegisteredModelsServerMockRecorder struct {
	mock *MockConfigAdminService_ListRegisteredModelsServer
}

// NewMockConfigAdminService_ListRegisteredModelsServer creates a new mock instance.
func NewMockConfigAdminService_ListRegisteredModelsServer(ctrl *gomock.Controller) *MockConfigAdminService_ListRegisteredModelsServer {
	mock := &MockConfigAdminService_ListRegisteredModelsServer{ctrl: ctrl}
	mock.recorder = &MockConfigAdminService_ListRegisteredModelsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAdminService_ListRegisteredModelsServer) EXPECT() *MockConfigAdminService_ListRegisteredModelsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) Send(arg0 *admin.ModelPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockConfigAdminService_ListRegisteredModelsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockConfigAdminService_ListRegisteredModelsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockConfigAdminService_ListRegisteredModelsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigAdminService_ListRegisteredModelsServer)(nil).SetTrailer), arg0)
}

// MockModelPluginServiceClient is a mock of ModelPluginServiceClient interface.
type MockModelPluginServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelPluginServiceClientMockRecorder
}

// MockModelPluginServiceClientMockRecorder is the mock recorder for MockModelPluginServiceClient.
type MockModelPluginServiceClientMockRecorder struct {
	mock *MockModelPluginServiceClient
}

// NewMockModelPluginServiceClient creates a new mock instance.
func NewMockModelPluginServiceClient(ctrl *gomock.Controller) *MockModelPluginServiceClient {
	mock := &MockModelPluginServiceClient{ctrl: ctrl}
	mock.recorder = &MockModelPluginServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPluginServiceClient) EXPECT() *MockModelPluginServiceClientMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelPluginServiceClient) GetModelInfo(ctx context.Context, in *admin.ModelInfoRequest, opts ...grpc.CallOption) (*admin.ModelInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelInfo", varargs...)
	ret0, _ := ret[0].(*admin.ModelInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelPluginServiceClientMockRecorder) GetModelInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelPluginServiceClient)(nil).GetModelInfo), varargs...)
}

// GetPathValues mocks base method.
func (m *MockModelPluginServiceClient) GetPathValues(ctx context.Context, in *admin.PathValuesRequest, opts ...grpc.CallOption) (*admin.PathValuesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPathValues", varargs...)
	ret0, _ := ret[0].(*admin.PathValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPathValues indicates an expected call of GetPathValues.
func (mr *MockModelPluginServiceClientMockRecorder) GetPathValues(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathValues", reflect.TypeOf((*MockModelPluginServiceClient)(nil).GetPathValues), varargs...)
}

// GetValueSelection mocks base method.
func (m *MockModelPluginServiceClient) GetValueSelection(ctx context.Context, in *admin.ValueSelectionRequest, opts ...grpc.CallOption) (*admin.ValueSelectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValueSelection", varargs...)
	ret0, _ := ret[0].(*admin.ValueSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueSelection indicates an expected call of GetValueSelection.
func (mr *MockModelPluginServiceClientMockRecorder) GetValueSelection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueSelection", reflect.TypeOf((*MockModelPluginServiceClient)(nil).GetValueSelection), varargs...)
}

// GetValueSelectionChunked mocks base method.
func (m *MockModelPluginServiceClient) GetValueSelectionChunked(ctx context.Context, opts ...grpc.CallOption) (admin.ModelPluginService_GetValueSelectionChunkedClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValueSelectionChunked", varargs...)
	ret0, _ := ret[0].(admin.ModelPluginService_GetValueSelectionChunkedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueSelectionChunked indicates an expected call of GetValueSelectionChunked.
func (mr *MockModelPluginServiceClientMockRecorder) GetValueSelectionChunked(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueSelectionChunked", reflect.TypeOf((*MockModelPluginServiceClient)(nil).GetValueSelectionChunked), varargs...)
}

// ValidateConfig mocks base method.
func (m *MockModelPluginServiceClient) ValidateConfig(ctx context.Context, in *admin.ValidateConfigRequest, opts ...grpc.CallOption) (*admin.ValidateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateConfig", varargs...)
	ret0, _ := ret[0].(*admin.ValidateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockModelPluginServiceClientMockRecorder) ValidateConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockModelPluginServiceClient)(nil).ValidateConfig), varargs...)
}

// ValidateConfigChunked mocks base method.
func (m *MockModelPluginServiceClient) ValidateConfigChunked(ctx context.Context, opts ...grpc.CallOption) (admin.ModelPluginService_ValidateConfigChunkedClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateConfigChunked", varargs...)
	ret0, _ := ret[0].(admin.ModelPluginService_ValidateConfigChunkedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfigChunked indicates an expected call of ValidateConfigChunked.
func (mr *MockModelPluginServiceClientMockRecorder) ValidateConfigChunked(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigChunked", reflect.TypeOf((*MockModelPluginServiceClient)(nil).ValidateConfigChunked), varargs...)
}

// MockModelPluginService_ValidateConfigChunkedClient is a mock of ModelPluginService_ValidateConfigChunkedClient interface.
type MockModelPluginService_ValidateConfigChunkedClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelPluginService_ValidateConfigChunkedClientMockRecorder
}

// MockModelPluginService_ValidateConfigChunkedClientMockRecorder is the mock recorder for MockModelPluginService_ValidateConfigChunkedClient.
type MockModelPluginService_ValidateConfigChunkedClientMockRecorder struct {
	mock *MockModelPluginService_ValidateConfigChunkedClient
}

// NewMockModelPluginService_ValidateConfigChunkedClient creates a new mock instance.
func NewMockModelPluginService_ValidateConfigChunkedClient(ctrl *gomock.Controller) *MockModelPluginService_ValidateConfigChunkedClient {
	mock := &MockModelPluginService_ValidateConfigChunkedClient{ctrl: ctrl}
	mock.recorder = &MockModelPluginService_ValidateConfigChunkedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPluginService_ValidateConfigChunkedClient) EXPECT() *MockModelPluginService_ValidateConfigChunkedClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedClient) CloseAndRecv() (*admin.ValidateConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*admin.ValidateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).Context))
}

// Header mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockModelPluginService_ValidateConfigChunkedClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedClient) Send(arg0 *admin.ValidateConfigRequestChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelPluginService_ValidateConfigChunkedClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockModelPluginService_ValidateConfigChunkedClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedClient)(nil).Trailer))
}

// MockModelPluginService_GetValueSelectionChunkedClient is a mock of ModelPluginService_GetValueSelectionChunkedClient interface.
type MockModelPluginService_GetValueSelectionChunkedClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder
}

// MockModelPluginService_GetValueSelectionChunkedClientMockRecorder is the mock recorder for MockModelPluginService_GetValueSelectionChunkedClient.
type MockModelPluginService_GetValueSelectionChunkedClientMockRecorder struct {
	mock *MockModelPluginService_GetValueSelectionChunkedClient
}

// NewMockModelPluginService_GetValueSelectionChunkedClient creates a new mock instance.
func NewMockModelPluginService_GetValueSelectionChunkedClient(ctrl *gomock.Controller) *MockModelPluginService_GetValueSelectionChunkedClient {
	mock := &MockModelPluginService_GetValueSelectionChunkedClient{ctrl: ctrl}
	mock.recorder = &MockModelPluginService_GetValueSelectionChunkedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) EXPECT() *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) CloseAndRecv() (*admin.ValueSelectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*admin.ValueSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).Context))
}

// Header mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockModelPluginService_GetValueSelectionChunkedClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) Send(arg0 *admin.ValueSelectionRequestChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelPluginService_GetValueSelectionChunkedClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockModelPluginService_GetValueSelectionChunkedClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedClient)(nil).Trailer))
}

// MockModelPluginServiceServer is a mock of ModelPluginServiceServer interface.
type MockModelPluginServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelPluginServiceServerMockRecorder
}

// MockModelPluginServiceServerMockRecorder is the mock recorder for MockModelPluginServiceServer.
type MockModelPluginServiceServerMockRecorder struct {
	mock *MockModelPluginServiceServer
}

// NewMockModelPluginServiceServer creates a new mock instance.
func NewMockModelPluginServiceServer(ctrl *gomock.Controller) *MockModelPluginServiceServer {
	mock := &MockModelPluginServiceServer{ctrl: ctrl}
	mock.recorder = &MockModelPluginServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPluginServiceServer) EXPECT() *MockModelPluginServiceServerMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelPluginServiceServer) GetModelInfo(arg0 context.Context, arg1 *admin.ModelInfoRequest) (*admin.ModelInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0, arg1)
	ret0, _ := ret[0].(*admin.ModelInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelPluginServiceServerMockRecorder) GetModelInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelPluginServiceServer)(nil).GetModelInfo), arg0, arg1)
}

// GetPathValues mocks base method.
func (m *MockModelPluginServiceServer) GetPathValues(arg0 context.Context, arg1 *admin.PathValuesRequest) (*admin.PathValuesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathValues", arg0, arg1)
	ret0, _ := ret[0].(*admin.PathValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPathValues indicates an expected call of GetPathValues.
func (mr *MockModelPluginServiceServerMockRecorder) GetPathValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathValues", reflect.TypeOf((*MockModelPluginServiceServer)(nil).GetPathValues), arg0, arg1)
}

// GetValueSelection mocks base method.
func (m *MockModelPluginServiceServer) GetValueSelection(arg0 context.Context, arg1 *admin.ValueSelectionRequest) (*admin.ValueSelectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueSelection", arg0, arg1)
	ret0, _ := ret[0].(*admin.ValueSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueSelection indicates an expected call of GetValueSelection.
func (mr *MockModelPluginServiceServerMockRecorder) GetValueSelection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueSelection", reflect.TypeOf((*MockModelPluginServiceServer)(nil).GetValueSelection), arg0, arg1)
}

// GetValueSelectionChunked mocks base method.
func (m *MockModelPluginServiceServer) GetValueSelectionChunked(arg0 admin.ModelPluginService_GetValueSelectionChunkedServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueSelectionChunked", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetValueSelectionChunked indicates an expected call of GetValueSelectionChunked.
func (mr *MockModelPluginServiceServerMockRecorder) GetValueSelectionChunked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueSelectionChunked", reflect.TypeOf((*MockModelPluginServiceServer)(nil).GetValueSelectionChunked), arg0)
}

// ValidateConfig mocks base method.
func (m *MockModelPluginServiceServer) ValidateConfig(arg0 context.Context, arg1 *admin.ValidateConfigRequest) (*admin.ValidateConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0, arg1)
	ret0, _ := ret[0].(*admin.ValidateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockModelPluginServiceServerMockRecorder) ValidateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockModelPluginServiceServer)(nil).ValidateConfig), arg0, arg1)
}

// ValidateConfigChunked mocks base method.
func (m *MockModelPluginServiceServer) ValidateConfigChunked(arg0 admin.ModelPluginService_ValidateConfigChunkedServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfigChunked", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfigChunked indicates an expected call of ValidateConfigChunked.
func (mr *MockModelPluginServiceServerMockRecorder) ValidateConfigChunked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigChunked", reflect.TypeOf((*MockModelPluginServiceServer)(nil).ValidateConfigChunked), arg0)
}

// MockModelPluginService_ValidateConfigChunkedServer is a mock of ModelPluginService_ValidateConfigChunkedServer interface.
type MockModelPluginService_ValidateConfigChunkedServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelPluginService_ValidateConfigChunkedServerMockRecorder
}

// MockModelPluginService_ValidateConfigChunkedServerMockRecorder is the mock recorder for MockModelPluginService_ValidateConfigChunkedServer.
type MockModelPluginService_ValidateConfigChunkedServerMockRecorder struct {
	mock *MockModelPluginService_ValidateConfigChunkedServer
}

// NewMockModelPluginService_ValidateConfigChunkedServer creates a new mock instance.
func NewMockModelPluginService_ValidateConfigChunkedServer(ctrl *gomock.Controller) *MockModelPluginService_ValidateConfigChunkedServer {
	mock := &MockModelPluginService_ValidateConfigChunkedServer{ctrl: ctrl}
	mock.recorder = &MockModelPluginService_ValidateConfigChunkedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPluginService_ValidateConfigChunkedServer) EXPECT() *MockModelPluginService_ValidateConfigChunkedServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedServer) Recv() (*admin.ValidateConfigRequestChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.ValidateConfigRequestChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockModelPluginService_ValidateConfigChunkedServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedServer) SendAndClose(arg0 *admin.ValidateConfigResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelPluginService_ValidateConfigChunkedServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockModelPluginService_ValidateConfigChunkedServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockModelPluginService_ValidateConfigChunkedServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockModelPluginService_ValidateConfigChunkedServer)(nil).SetTrailer), arg0)
}

// MockModelPluginService_GetValueSelectionChunkedServer is a mock of ModelPluginService_GetValueSelectionChunkedServer interface.
type MockModelPluginService_GetValueSelectionChunkedServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder
}

// MockModelPluginService_GetValueSelectionChunkedServerMockRecorder is the mock recorder for MockModelPluginService_GetValueSelectionChunkedServer.
type MockModelPluginService_GetValueSelectionChunkedServerMockRecorder struct {
	mock *MockModelPluginService_GetValueSelectionChunkedServer
}

// NewMockModelPluginService_GetValueSelectionChunkedServer creates a new mock instance.
func NewMockModelPluginService_GetValueSelectionChunkedServer(ctrl *gomock.Controller) *MockModelPluginService_GetValueSelectionChunkedServer {
	mock := &MockModelPluginService_GetValueSelectionChunkedServer{ctrl: ctrl}
	mock.recorder = &MockModelPluginService_GetValueSelectionChunkedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) EXPECT() *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) Recv() (*admin.ValueSelectionRequestChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.ValueSelectionRequestChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockModelPluginService_GetValueSelectionChunkedServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) SendAndClose(arg0 *admin.ValueSelectionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockModelPluginService_GetValueSelectionChunkedServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockModelPluginService_GetValueSelectionChunkedServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockModelPluginService_GetValueSelectionChunkedServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockModelPluginService_GetValueSelectionChunkedServer)(nil).SetTrailer), arg0)
}

// MockTransactionServiceClient is a mock of TransactionServiceClient interface.
type MockTransactionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceClientMockRecorder
}

// MockTransactionServiceClientMockRecorder is the mock recorder for MockTransactionServiceClient.
type MockTransactionServiceClientMockRecorder struct {
	mock *MockTransactionServiceClient
}

// NewMockTransactionServiceClient creates a new mock instance.
func NewMockTransactionServiceClient(ctrl *gomock.Controller) *MockTransactionServiceClient {
	mock := &MockTransactionServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceClient) EXPECT() *MockTransactionServiceClientMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionServiceClient) GetTransaction(ctx context.Context, in *admin.GetTransactionRequest, opts ...grpc.CallOption) (*admin.GetTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(*admin.GetTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionServiceClientMockRecorder) GetTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionServiceClient)(nil).GetTransaction), varargs...)
}

// ListTransactions mocks base method.
func (m *MockTransactionServiceClient) ListTransactions(ctx context.Context, in *admin.ListTransactionsRequest, opts ...grpc.CallOption) (admin.TransactionService_ListTransactionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactions", varargs...)
	ret0, _ := ret[0].(admin.TransactionService_ListTransactionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockTransactionServiceClientMockRecorder) ListTransactions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockTransactionServiceClient)(nil).ListTransactions), varargs...)
}

// WatchTransactions mocks base method.
func (m *MockTransactionServiceClient) WatchTransactions(ctx context.Context, in *admin.WatchTransactionsRequest, opts ...grpc.CallOption) (admin.TransactionService_WatchTransactionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchTransactions", varargs...)
	ret0, _ := ret[0].(admin.TransactionService_WatchTransactionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransactions indicates an expected call of WatchTransactions.
func (mr *MockTransactionServiceClientMockRecorder) WatchTransactions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransactions", reflect.TypeOf((*MockTransactionServiceClient)(nil).WatchTransactions), varargs...)
}

// MockTransactionService_ListTransactionsClient is a mock of TransactionService_ListTransactionsClient interface.
type MockTransactionService_ListTransactionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionService_ListTransactionsClientMockRecorder
}

// MockTransactionService_ListTransactionsClientMockRecorder is the mock recorder for MockTransactionService_ListTransactionsClient.
type MockTransactionService_ListTransactionsClientMockRecorder struct {
	mock *MockTransactionService_ListTransactionsClient
}

// NewMockTransactionService_ListTransactionsClient creates a new mock instance.
func NewMockTransactionService_ListTransactionsClient(ctrl *gomock.Controller) *MockTransactionService_ListTransactionsClient {
	mock := &MockTransactionService_ListTransactionsClient{ctrl: ctrl}
	mock.recorder = &MockTransactionService_ListTransactionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService_ListTransactionsClient) EXPECT() *MockTransactionService_ListTransactionsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTransactionService_ListTransactionsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTransactionService_ListTransactionsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTransactionService_ListTransactionsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTransactionService_ListTransactionsClient) Recv() (*admin.ListTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.ListTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTransactionService_ListTransactionsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockTransactionService_ListTransactionsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockTransactionService_ListTransactionsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTransactionService_ListTransactionsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTransactionService_ListTransactionsClient)(nil).Trailer))
}

// MockTransactionService_WatchTransactionsClient is a mock of TransactionService_WatchTransactionsClient interface.
type MockTransactionService_WatchTransactionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionService_WatchTransactionsClientMockRecorder
}

// MockTransactionService_WatchTransactionsClientMockRecorder is the mock recorder for MockTransactionService_WatchTransactionsClient.
type MockTransactionService_WatchTransactionsClientMockRecorder struct {
	mock *MockTransactionService_WatchTransactionsClient
}

// NewMockTransactionService_WatchTransactionsClient creates a new mock instance.
func NewMockTransactionService_WatchTransactionsClient(ctrl *gomock.Controller) *MockTransactionService_WatchTransactionsClient {
	mock := &MockTransactionService_WatchTransactionsClient{ctrl: ctrl}
	mock.recorder = &MockTransactionService_WatchTransactionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService_WatchTransactionsClient) EXPECT() *MockTransactionService_WatchTransactionsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTransactionService_WatchTransactionsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTransactionService_WatchTransactionsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTransactionService_WatchTransactionsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTransactionService_WatchTransactionsClient) Recv() (*admin.WatchTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.WatchTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTransactionService_WatchTransactionsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockTransactionService_WatchTransactionsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockTransactionService_WatchTransactionsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTransactionService_WatchTransactionsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTransactionService_WatchTransactionsClient)(nil).Trailer))
}

// MockTransactionServiceServer is a mock of TransactionServiceServer interface.
type MockTransactionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceServerMockRecorder
}

// MockTransactionServiceServerMockRecorder is the mock recorder for MockTransactionServiceServer.
type MockTransactionServiceServerMockRecorder struct {
	mock *MockTransactionServiceServer
}

// NewMockTransactionServiceServer creates a new mock instance.
func NewMockTransactionServiceServer(ctrl *gomock.Controller) *MockTransactionServiceServer {
	mock := &MockTransactionServiceServer{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceServer) EXPECT() *MockTransactionServiceServerMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionServiceServer) GetTransaction(arg0 context.Context, arg1 *admin.GetTransactionRequest) (*admin.GetTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*admin.GetTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionServiceServerMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionServiceServer)(nil).GetTransaction), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockTransactionServiceServer) ListTransactions(arg0 *admin.ListTransactionsRequest, arg1 admin.TransactionService_ListTransactionsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockTransactionServiceServerMockRecorder) ListTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockTransactionServiceServer)(nil).ListTransactions), arg0, arg1)
}

// WatchTransactions mocks base method.
func (m *MockTransactionServiceServer) WatchTransactions(arg0 *admin.WatchTransactionsRequest, arg1 admin.TransactionService_WatchTransactionsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchTransactions indicates an expected call of WatchTransactions.
func (mr *MockTransactionServiceServerMockRecorder) WatchTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransactions", reflect.TypeOf((*MockTransactionServiceServer)(nil).WatchTransactions), arg0, arg1)
}

// MockTransactionService_ListTransactionsServer is a mock of TransactionService_ListTransactionsServer interface.
type MockTransactionService_ListTransactionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionService_ListTransactionsServerMockRecorder
}

// MockTransactionService_ListTransactionsServerMockRecorder is the mock recorder for MockTransactionService_ListTransactionsServer.
type MockTransactionService_ListTransactionsServerMockRecorder struct {
	mock *MockTransactionService_ListTransactionsServer
}

// NewMockTransactionService_ListTransactionsServer creates a new mock instance.
func NewMockTransactionService_ListTransactionsServer(ctrl *gomock.Controller) *MockTransactionService_ListTransactionsServer {
	mock := &MockTransactionService_ListTransactionsServer{ctrl: ctrl}
	mock.recorder = &MockTransactionService_ListTransactionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService_ListTransactionsServer) EXPECT() *MockTransactionService_ListTransactionsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockTransactionService_ListTransactionsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockTransactionService_ListTransactionsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTransactionService_ListTransactionsServer) Send(arg0 *admin.ListTransactionsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockTransactionService_ListTransactionsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTransactionService_ListTransactionsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockTransactionService_ListTransactionsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTransactionService_ListTransactionsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTransactionService_ListTransactionsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTransactionService_ListTransactionsServer)(nil).SetTrailer), arg0)
}

// MockTransactionService_WatchTransactionsServer is a mock of TransactionService_WatchTransactionsServer interface.
type MockTransactionService_WatchTransactionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionService_WatchTransactionsServerMockRecorder
}

// MockTransactionService_WatchTransactionsServerMockRecorder is the mock recorder for MockTransactionService_WatchTransactionsServer.
type MockTransactionService_WatchTransactionsServerMockRecorder struct {
	mock *MockTransactionService_WatchTransactionsServer
}

// NewMockTransactionService_WatchTransactionsServer creates a new mock instance.
func NewMockTransactionService_WatchTransactionsServer(ctrl *gomock.Controller) *MockTransactionService_WatchTransactionsServer {
	mock := &MockTransactionService_WatchTransactionsServer{ctrl: ctrl}
	mock.recorder = &MockTransactionService_WatchTransactionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService_WatchTransactionsServer) EXPECT() *MockTransactionService_WatchTransactionsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockTransactionService_WatchTransactionsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockTransactionService_WatchTransactionsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTransactionService_WatchTransactionsServer) Send(arg0 *admin.WatchTransactionsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockTransactionService_WatchTransactionsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTransactionService_WatchTransactionsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockTransactionService_WatchTransactionsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTransactionService_WatchTransactionsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTransactionService_WatchTransactionsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTransactionService_WatchTransactionsServer)(nil).SetTrailer), arg0)
}

// MockConfigurationServiceClient is a mock of ConfigurationServiceClient interface.
type MockConfigurationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationServiceClientMockRecorder
}

// MockConfigurationServiceClientMockRecorder is the mock recorder for MockConfigurationServiceClient.
type MockConfigurationServiceClientMockRecorder struct {
	mock *MockConfigurationServiceClient
}

// NewMockConfigurationServiceClient creates a new mock instance.
func NewMockConfigurationServiceClient(ctrl *gomock.Controller) *MockConfigurationServiceClient {
	mock := &MockConfigurationServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigurationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationServiceClient) EXPECT() *MockConfigurationServiceClientMockRecorder {
	return m.recorder
}

// GetConfiguration mocks base method.
func (m *MockConfigurationServiceClient) GetConfiguration(ctx context.Context, in *admin.GetConfigurationRequest, opts ...grpc.CallOption) (*admin.GetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguration", varargs...)
	ret0, _ := ret[0].(*admin.GetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockConfigurationServiceClientMockRecorder) GetConfiguration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockConfigurationServiceClient)(nil).GetConfiguration), varargs...)
}

// ListConfigurations mocks base method.
func (m *MockConfigurationServiceClient) ListConfigurations(ctx context.Context, in *admin.ListConfigurationsRequest, opts ...grpc.CallOption) (admin.ConfigurationService_ListConfigurationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurations", varargs...)
	ret0, _ := ret[0].(admin.ConfigurationService_ListConfigurationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurations indicates an expected call of ListConfigurations.
func (mr *MockConfigurationServiceClientMockRecorder) ListConfigurations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurations", reflect.TypeOf((*MockConfigurationServiceClient)(nil).ListConfigurations), varargs...)
}

// WatchConfigurations mocks base method.
func (m *MockConfigurationServiceClient) WatchConfigurations(ctx context.Context, in *admin.WatchConfigurationsRequest, opts ...grpc.CallOption) (admin.ConfigurationService_WatchConfigurationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchConfigurations", varargs...)
	ret0, _ := ret[0].(admin.ConfigurationService_WatchConfigurationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConfigurations indicates an expected call of WatchConfigurations.
func (mr *MockConfigurationServiceClientMockRecorder) WatchConfigurations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConfigurations", reflect.TypeOf((*MockConfigurationServiceClient)(nil).WatchConfigurations), varargs...)
}

// MockConfigurationService_ListConfigurationsClient is a mock of ConfigurationService_ListConfigurationsClient interface.
type MockConfigurationService_ListConfigurationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationService_ListConfigurationsClientMockRecorder
}

// MockConfigurationService_ListConfigurationsClientMockRecorder is the mock recorder for MockConfigurationService_ListConfigurationsClient.
type MockConfigurationService_ListConfigurationsClientMockRecorder struct {
	mock *MockConfigurationService_ListConfigurationsClient
}

// NewMockConfigurationService_ListConfigurationsClient creates a new mock instance.
func NewMockConfigurationService_ListConfigurationsClient(ctrl *gomock.Controller) *MockConfigurationService_ListConfigurationsClient {
	mock := &MockConfigurationService_ListConfigurationsClient{ctrl: ctrl}
	mock.recorder = &MockConfigurationService_ListConfigurationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationService_ListConfigurationsClient) EXPECT() *MockConfigurationService_ListConfigurationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigurationService_ListConfigurationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigurationService_ListConfigurationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigurationService_ListConfigurationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigurationService_ListConfigurationsClient) Recv() (*admin.ListConfigurationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.ListConfigurationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigurationService_ListConfigurationsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockConfigurationService_ListConfigurationsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockConfigurationService_ListConfigurationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigurationService_ListConfigurationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigurationService_ListConfigurationsClient)(nil).Trailer))
}

// MockConfigurationService_WatchConfigurationsClient is a mock of ConfigurationService_WatchConfigurationsClient interface.
type MockConfigurationService_WatchConfigurationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationService_WatchConfigurationsClientMockRecorder
}

// MockConfigurationService_WatchConfigurationsClientMockRecorder is the mock recorder for MockConfigurationService_WatchConfigurationsClient.
type MockConfigurationService_WatchConfigurationsClientMockRecorder struct {
	mock *MockConfigurationService_WatchConfigurationsClient
}

// NewMockConfigurationService_WatchConfigurationsClient creates a new mock instance.
func NewMockConfigurationService_WatchConfigurationsClient(ctrl *gomock.Controller) *MockConfigurationService_WatchConfigurationsClient {
	mock := &MockConfigurationService_WatchConfigurationsClient{ctrl: ctrl}
	mock.recorder = &MockConfigurationService_WatchConfigurationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationService_WatchConfigurationsClient) EXPECT() *MockConfigurationService_WatchConfigurationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigurationService_WatchConfigurationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigurationService_WatchConfigurationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigurationService_WatchConfigurationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigurationService_WatchConfigurationsClient) Recv() (*admin.WatchConfigurationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*admin.WatchConfigurationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigurationService_WatchConfigurationsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockConfigurationService_WatchConfigurationsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockConfigurationService_WatchConfigurationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigurationService_WatchConfigurationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsClient)(nil).Trailer))
}

// MockConfigurationServiceServer is a mock of ConfigurationServiceServer interface.
type MockConfigurationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationServiceServerMockRecorder
}

// MockConfigurationServiceServerMockRecorder is the mock recorder for MockConfigurationServiceServer.
type MockConfigurationServiceServerMockRecorder struct {
	mock *MockConfigurationServiceServer
}

// NewMockConfigurationServiceServer creates a new mock instance.
func NewMockConfigurationServiceServer(ctrl *gomock.Controller) *MockConfigurationServiceServer {
	mock := &MockConfigurationServiceServer{ctrl: ctrl}
	mock.recorder = &MockConfigurationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationServiceServer) EXPECT() *MockConfigurationServiceServerMockRecorder {
	return m.recorder
}

// GetConfiguration mocks base method.
func (m *MockConfigurationServiceServer) GetConfiguration(arg0 context.Context, arg1 *admin.GetConfigurationRequest) (*admin.GetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*admin.GetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockConfigurationServiceServerMockRecorder) GetConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockConfigurationServiceServer)(nil).GetConfiguration), arg0, arg1)
}

// ListConfigurations mocks base method.
func (m *MockConfigurationServiceServer) ListConfigurations(arg0 *admin.ListConfigurationsRequest, arg1 admin.ConfigurationService_ListConfigurationsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurations indicates an expected call of ListConfigurations.
func (mr *MockConfigurationServiceServerMockRecorder) ListConfigurations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurations", reflect.TypeOf((*MockConfigurationServiceServer)(nil).ListConfigurations), arg0, arg1)
}

// WatchConfigurations mocks base method.
func (m *MockConfigurationServiceServer) WatchConfigurations(arg0 *admin.WatchConfigurationsRequest, arg1 admin.ConfigurationService_WatchConfigurationsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConfigurations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchConfigurations indicates an expected call of WatchConfigurations.
func (mr *MockConfigurationServiceServerMockRecorder) WatchConfigurations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConfigurations", reflect.TypeOf((*MockConfigurationServiceServer)(nil).WatchConfigurations), arg0, arg1)
}

// MockConfigurationService_ListConfigurationsServer is a mock of ConfigurationService_ListConfigurationsServer interface.
type MockConfigurationService_ListConfigurationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationService_ListConfigurationsServerMockRecorder
}

// MockConfigurationService_ListConfigurationsServerMockRecorder is the mock recorder for MockConfigurationService_ListConfigurationsServer.
type MockConfigurationService_ListConfigurationsServerMockRecorder struct {
	mock *MockConfigurationService_ListConfigurationsServer
}

// NewMockConfigurationService_ListConfigurationsServer creates a new mock instance.
func NewMockConfigurationService_ListConfigurationsServer(ctrl *gomock.Controller) *MockConfigurationService_ListConfigurationsServer {
	mock := &MockConfigurationService_ListConfigurationsServer{ctrl: ctrl}
	mock.recorder = &MockConfigurationService_ListConfigurationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationService_ListConfigurationsServer) EXPECT() *MockConfigurationService_ListConfigurationsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockConfigurationService_ListConfigurationsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigurationService_ListConfigurationsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockConfigurationService_ListConfigurationsServer) Send(arg0 *admin.ListConfigurationsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockConfigurationService_ListConfigurationsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockConfigurationService_ListConfigurationsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockConfigurationService_ListConfigurationsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockConfigurationService_ListConfigurationsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockConfigurationService_ListConfigurationsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigurationService_ListConfigurationsServer)(nil).SetTrailer), arg0)
}

// MockConfigurationService_WatchConfigurationsServer is a mock of ConfigurationService_WatchConfigurationsServer interface.
type MockConfigurationService_WatchConfigurationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationService_WatchConfigurationsServerMockRecorder
}

// MockConfigurationService_WatchConfigurationsServerMockRecorder is the mock recorder for MockConfigurationService_WatchConfigurationsServer.
type MockConfigurationService_WatchConfigurationsServerMockRecorder struct {
	mock *MockConfigurationService_WatchConfigurationsServer
}

// NewMockConfigurationService_WatchConfigurationsServer creates a new mock instance.
func NewMockConfigurationService_WatchConfigurationsServer(ctrl *gomock.Controller) *MockConfigurationService_WatchConfigurationsServer {
	mock := &MockConfigurationService_WatchConfigurationsServer{ctrl: ctrl}
	mock.recorder = &MockConfigurationService_WatchConfigurationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationService_WatchConfigurationsServer) EXPECT() *MockConfigurationService_WatchConfigurationsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockConfigurationService_WatchConfigurationsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigurationService_WatchConfigurationsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockConfigurationService_WatchConfigurationsServer) Send(arg0 *admin.WatchConfigurationsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockConfigurationService_WatchConfigurationsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockConfigurationService_WatchConfigurationsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockConfigurationService_WatchConfigurationsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockConfigurationService_WatchConfigurationsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockConfigurationService_WatchConfigurationsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigurationService_WatchConfigurationsServer)(nil).SetTrailer), arg0)
}
