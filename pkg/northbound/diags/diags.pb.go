// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/northbound/diags/diags.proto

package diags

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	admin "github.com/onosproject/onos-config/pkg/northbound/admin"
	device "github.com/onosproject/onos-config/pkg/types/change/device"
	github_com_onosproject_onos_config_pkg_types_change_device "github.com/onosproject/onos-config/pkg/types/change/device"
	github_com_onosproject_onos_config_pkg_types_change_network "github.com/onosproject/onos-config/pkg/types/change/network"
	network "github.com/onosproject/onos-config/pkg/types/change/network"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ChangesRequest is a message for specifying GetChanges query parameters.
type ChangesRequest struct {
	//    option deprecated = true; Commented out for the moment - breaks static check
	ChangeIDs            []string `protobuf:"bytes,1,rep,name=change_ids,json=changeIds,proto3" json:"change_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangesRequest) Reset()         { *m = ChangesRequest{} }
func (m *ChangesRequest) String() string { return proto.CompactTextString(m) }
func (*ChangesRequest) ProtoMessage()    {}
func (*ChangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{0}
}
func (m *ChangesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangesRequest.Unmarshal(m, b)
}
func (m *ChangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangesRequest.Marshal(b, m, deterministic)
}
func (m *ChangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangesRequest.Merge(m, src)
}
func (m *ChangesRequest) XXX_Size() int {
	return xxx_messageInfo_ChangesRequest.Size(m)
}
func (m *ChangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangesRequest proto.InternalMessageInfo

func (m *ChangesRequest) GetChangeIDs() []string {
	if m != nil {
		return m.ChangeIDs
	}
	return nil
}

// ConfigRequest is a message for specifying GetConfigurations query parameters.
type ConfigRequest struct {
	//    option deprecated = true; Commented out for the moment - breaks static check
	DeviceIDs            []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigRequest) Reset()         { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()    {}
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{1}
}
func (m *ConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigRequest.Unmarshal(m, b)
}
func (m *ConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigRequest.Marshal(b, m, deterministic)
}
func (m *ConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRequest.Merge(m, src)
}
func (m *ConfigRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigRequest.Size(m)
}
func (m *ConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRequest proto.InternalMessageInfo

func (m *ConfigRequest) GetDeviceIDs() []string {
	if m != nil {
		return m.DeviceIDs
	}
	return nil
}

// OpStateRequest is a message for specifying GetOpState query parameters.
type OpStateRequest struct {
	// The request is always in the context of a Device ID. If the device does
	// not exist or is disconnected an error will be returned.
	DeviceId string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all paths for the device have been streamed to the client
	Subscribe            bool     `protobuf:"varint,2,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpStateRequest) Reset()         { *m = OpStateRequest{} }
func (m *OpStateRequest) String() string { return proto.CompactTextString(m) }
func (*OpStateRequest) ProtoMessage()    {}
func (*OpStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{2}
}
func (m *OpStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpStateRequest.Unmarshal(m, b)
}
func (m *OpStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpStateRequest.Marshal(b, m, deterministic)
}
func (m *OpStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpStateRequest.Merge(m, src)
}
func (m *OpStateRequest) XXX_Size() int {
	return xxx_messageInfo_OpStateRequest.Size(m)
}
func (m *OpStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpStateRequest proto.InternalMessageInfo

func (m *OpStateRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *OpStateRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

type OpStateResponse struct {
	// type is the type of the event
	Type admin.Type `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.admin.Type" json:"type,omitempty"`
	// device is the device on which the event occurred
	Pathvalue            *device.PathValue `protobuf:"bytes,2,opt,name=pathvalue,proto3" json:"pathvalue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OpStateResponse) Reset()         { *m = OpStateResponse{} }
func (m *OpStateResponse) String() string { return proto.CompactTextString(m) }
func (*OpStateResponse) ProtoMessage()    {}
func (*OpStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{3}
}
func (m *OpStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpStateResponse.Unmarshal(m, b)
}
func (m *OpStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpStateResponse.Marshal(b, m, deterministic)
}
func (m *OpStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpStateResponse.Merge(m, src)
}
func (m *OpStateResponse) XXX_Size() int {
	return xxx_messageInfo_OpStateResponse.Size(m)
}
func (m *OpStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpStateResponse proto.InternalMessageInfo

func (m *OpStateResponse) GetType() admin.Type {
	if m != nil {
		return m.Type
	}
	return admin.Type_NONE
}

func (m *OpStateResponse) GetPathvalue() *device.PathValue {
	if m != nil {
		return m.Pathvalue
	}
	return nil
}

// Configuration is a descriptor of a submitted configuration change targeted at a single device.
type Configuration struct {
	//    option deprecated = true; Commented out for the moment - breaks static check
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DeviceID             string     `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Version              string     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	DeviceType           string     `protobuf:"bytes,4,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Created              *time.Time `protobuf:"bytes,5,opt,name=created,proto3,stdtime" json:"created,omitempty"`
	Updated              *time.Time `protobuf:"bytes,6,opt,name=updated,proto3,stdtime" json:"updated,omitempty"`
	ChangeIDs            []string   `protobuf:"bytes,7,rep,name=change_ids,json=changeIds,proto3" json:"change_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{4}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Configuration.Unmarshal(m, b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return xxx_messageInfo_Configuration.Size(m)
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Configuration) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *Configuration) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Configuration) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Configuration) GetCreated() *time.Time {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Configuration) GetUpdated() *time.Time {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *Configuration) GetChangeIDs() []string {
	if m != nil {
		return m.ChangeIDs
	}
	return nil
}

// ListNetworkChangeRequest requests a stream of changes and updates to them
// By default, the request requests a stream of all changes that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all changes have been sent and events that occur following the last changes will be
// streamed to the client until the stream is closed.
type ListNetworkChangeRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all devices have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to specify a specific network change - if blank or '*' then select all
	// Can support `*` (match many chars) or '?' (match one char) as wildcard
	ChangeID             github_com_onosproject_onos_config_pkg_types_change_network.ID `protobuf:"bytes,2,opt,name=changeid,proto3,casttype=github.com/onosproject/onos-config/pkg/types/change/network.ID" json:"changeid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *ListNetworkChangeRequest) Reset()         { *m = ListNetworkChangeRequest{} }
func (m *ListNetworkChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworkChangeRequest) ProtoMessage()    {}
func (*ListNetworkChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{5}
}
func (m *ListNetworkChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkChangeRequest.Unmarshal(m, b)
}
func (m *ListNetworkChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkChangeRequest.Marshal(b, m, deterministic)
}
func (m *ListNetworkChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkChangeRequest.Merge(m, src)
}
func (m *ListNetworkChangeRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworkChangeRequest.Size(m)
}
func (m *ListNetworkChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkChangeRequest proto.InternalMessageInfo

func (m *ListNetworkChangeRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListNetworkChangeRequest) GetChangeID() github_com_onosproject_onos_config_pkg_types_change_network.ID {
	if m != nil {
		return m.ChangeID
	}
	return ""
}

// ListNetworkChangeResponse carries a single network change event
type ListNetworkChangeResponse struct {
	// change is the network change on which the event occurred
	Change               *network.NetworkChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListNetworkChangeResponse) Reset()         { *m = ListNetworkChangeResponse{} }
func (m *ListNetworkChangeResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworkChangeResponse) ProtoMessage()    {}
func (*ListNetworkChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{6}
}
func (m *ListNetworkChangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkChangeResponse.Unmarshal(m, b)
}
func (m *ListNetworkChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkChangeResponse.Marshal(b, m, deterministic)
}
func (m *ListNetworkChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkChangeResponse.Merge(m, src)
}
func (m *ListNetworkChangeResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworkChangeResponse.Size(m)
}
func (m *ListNetworkChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkChangeResponse proto.InternalMessageInfo

func (m *ListNetworkChangeResponse) GetChange() *network.NetworkChange {
	if m != nil {
		return m.Change
	}
	return nil
}

// ListDeviceChangeRequest requests a stream of changes and updates to them
// By default, the request requests a stream of all changes that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all changes have been sent and events that occur following the last changes will be
// streamed to the client until the stream is closed.
type ListDeviceChangeRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all devices have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to specify a specific device change - if blank or '*' then select all
	// Can support `*` (match many chars) or '?' (match one char) as wildcard
	ChangeID             github_com_onosproject_onos_config_pkg_types_change_device.ID `protobuf:"bytes,2,opt,name=changeid,proto3,casttype=github.com/onosproject/onos-config/pkg/types/change/device.ID" json:"changeid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *ListDeviceChangeRequest) Reset()         { *m = ListDeviceChangeRequest{} }
func (m *ListDeviceChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ListDeviceChangeRequest) ProtoMessage()    {}
func (*ListDeviceChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{7}
}
func (m *ListDeviceChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceChangeRequest.Unmarshal(m, b)
}
func (m *ListDeviceChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceChangeRequest.Marshal(b, m, deterministic)
}
func (m *ListDeviceChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceChangeRequest.Merge(m, src)
}
func (m *ListDeviceChangeRequest) XXX_Size() int {
	return xxx_messageInfo_ListDeviceChangeRequest.Size(m)
}
func (m *ListDeviceChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceChangeRequest proto.InternalMessageInfo

func (m *ListDeviceChangeRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListDeviceChangeRequest) GetChangeID() github_com_onosproject_onos_config_pkg_types_change_device.ID {
	if m != nil {
		return m.ChangeID
	}
	return ""
}

// ListDeviceChangeResponse carries a single network change event
type ListDeviceChangeResponse struct {
	// change is the device change on which the event occurred
	Change               *device.DeviceChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListDeviceChangeResponse) Reset()         { *m = ListDeviceChangeResponse{} }
func (m *ListDeviceChangeResponse) String() string { return proto.CompactTextString(m) }
func (*ListDeviceChangeResponse) ProtoMessage()    {}
func (*ListDeviceChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_624d839d9ad9df06, []int{8}
}
func (m *ListDeviceChangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceChangeResponse.Unmarshal(m, b)
}
func (m *ListDeviceChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceChangeResponse.Marshal(b, m, deterministic)
}
func (m *ListDeviceChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceChangeResponse.Merge(m, src)
}
func (m *ListDeviceChangeResponse) XXX_Size() int {
	return xxx_messageInfo_ListDeviceChangeResponse.Size(m)
}
func (m *ListDeviceChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceChangeResponse proto.InternalMessageInfo

func (m *ListDeviceChangeResponse) GetChange() *device.DeviceChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func init() {
	proto.RegisterType((*ChangesRequest)(nil), "onos.config.diags.ChangesRequest")
	proto.RegisterType((*ConfigRequest)(nil), "onos.config.diags.ConfigRequest")
	proto.RegisterType((*OpStateRequest)(nil), "onos.config.diags.OpStateRequest")
	proto.RegisterType((*OpStateResponse)(nil), "onos.config.diags.OpStateResponse")
	proto.RegisterType((*Configuration)(nil), "onos.config.diags.Configuration")
	proto.RegisterType((*ListNetworkChangeRequest)(nil), "onos.config.diags.ListNetworkChangeRequest")
	proto.RegisterType((*ListNetworkChangeResponse)(nil), "onos.config.diags.ListNetworkChangeResponse")
	proto.RegisterType((*ListDeviceChangeRequest)(nil), "onos.config.diags.ListDeviceChangeRequest")
	proto.RegisterType((*ListDeviceChangeResponse)(nil), "onos.config.diags.ListDeviceChangeResponse")
}

func init() { proto.RegisterFile("pkg/northbound/diags/diags.proto", fileDescriptor_624d839d9ad9df06) }

var fileDescriptor_624d839d9ad9df06 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xd1, 0x4e, 0xd4, 0x4c,
	0x14, 0xfe, 0x07, 0xf6, 0x87, 0xed, 0x59, 0xe0, 0x0f, 0x93, 0x3f, 0xa1, 0x34, 0x26, 0xbb, 0x36,
	0x26, 0x82, 0x60, 0xbb, 0x59, 0xef, 0x4c, 0xc0, 0xb8, 0x10, 0x09, 0x06, 0xd1, 0x14, 0x34, 0x31,
	0x26, 0x9a, 0x6e, 0x3b, 0x74, 0x0b, 0x6c, 0xa7, 0x76, 0xa6, 0x18, 0x6e, 0x7d, 0x02, 0x9f, 0xc1,
	0x78, 0xef, 0x9d, 0x8f, 0x83, 0x09, 0x0f, 0xe1, 0x85, 0x57, 0xa6, 0x33, 0xd3, 0x65, 0x5b, 0x0a,
	0xae, 0x78, 0xd3, 0x4c, 0x67, 0xbe, 0xef, 0x3b, 0x73, 0xce, 0xf9, 0xe6, 0x40, 0x2b, 0x3e, 0x0a,
	0xec, 0x88, 0x26, 0xbc, 0xdf, 0xa3, 0x69, 0xe4, 0xdb, 0x7e, 0xe8, 0x06, 0x4c, 0x7e, 0xad, 0x38,
	0xa1, 0x9c, 0xe2, 0x79, 0x1a, 0x51, 0x66, 0x79, 0x34, 0x3a, 0x08, 0x03, 0x4b, 0x1c, 0x18, 0xcd,
	0x80, 0xd2, 0xe0, 0x98, 0xd8, 0x02, 0xd0, 0x4b, 0x0f, 0x6c, 0x1e, 0x0e, 0x08, 0xe3, 0xee, 0x20,
	0x96, 0x1c, 0xe3, 0xff, 0x80, 0x06, 0x54, 0x2c, 0xed, 0x6c, 0xa5, 0x76, 0x37, 0x82, 0x90, 0xf7,
	0xd3, 0x9e, 0xe5, 0xd1, 0x81, 0x9d, 0x89, 0xc6, 0x09, 0x3d, 0x24, 0x1e, 0x17, 0xeb, 0xfb, 0x32,
	0x80, 0x5d, 0xba, 0x8e, 0xeb, 0x0f, 0xc2, 0x48, 0x7e, 0x95, 0xc8, 0x93, 0x31, 0x45, 0xf8, 0x69,
	0x4c, 0x98, 0xed, 0xf5, 0xdd, 0x28, 0x20, 0xb6, 0x4f, 0x4e, 0x42, 0x8f, 0xc8, 0x3d, 0xa5, 0xb3,
	0x75, 0x13, 0x9d, 0x88, 0xf0, 0x0f, 0x34, 0x39, 0x1a, 0x15, 0x32, 0xd7, 0x61, 0x6e, 0x43, 0x9c,
	0x32, 0x87, 0xbc, 0x4f, 0x09, 0xe3, 0x78, 0x15, 0x40, 0xe2, 0xdf, 0x85, 0x3e, 0xd3, 0x51, 0x6b,
	0x72, 0x49, 0xeb, 0xce, 0x9e, 0x9f, 0x35, 0x35, 0x89, 0xdb, 0xde, 0x64, 0x8e, 0x26, 0x01, 0xdb,
	0x3e, 0x33, 0xd7, 0x60, 0x76, 0x43, 0x84, 0x1b, 0xa1, 0xcb, 0xfb, 0x96, 0xe9, 0x9b, 0x62, 0x57,
	0xd0, 0x25, 0x20, 0xa3, 0x3f, 0x85, 0xb9, 0xe7, 0xf1, 0x1e, 0x77, 0x39, 0xc9, 0xf9, 0x06, 0xd4,
	0xf3, 0x63, 0x1d, 0xb5, 0xd0, 0x92, 0xe6, 0x0c, 0xff, 0xf1, 0x2d, 0xd0, 0x58, 0xda, 0x63, 0x5e,
	0x12, 0xf6, 0x88, 0x3e, 0xd1, 0x42, 0x4b, 0x75, 0xe7, 0x62, 0xc3, 0xfc, 0x88, 0xe0, 0xbf, 0xa1,
	0x18, 0x8b, 0x69, 0xc4, 0x08, 0x5e, 0x81, 0x5a, 0x96, 0xad, 0x50, 0x9a, 0xeb, 0x2c, 0x58, 0xa3,
	0x6e, 0x90, 0x7d, 0xd9, 0x3f, 0x8d, 0x89, 0x23, 0x40, 0xb8, 0x0b, 0x5a, 0xec, 0xf2, 0xfe, 0x89,
	0x7b, 0x9c, 0x4a, 0xf9, 0x46, 0xe7, 0x4e, 0x81, 0x21, 0xd3, 0xb6, 0xe4, 0x7d, 0xac, 0x17, 0x2e,
	0xef, 0xbf, 0xca, 0xb0, 0xce, 0x05, 0xcd, 0xfc, 0x3a, 0x91, 0x17, 0x24, 0x4d, 0x5c, 0x1e, 0xd2,
	0x08, 0x63, 0xa8, 0x45, 0xee, 0x80, 0xa8, 0x64, 0xc4, 0x1a, 0x2f, 0x83, 0x36, 0x2c, 0x92, 0x88,
	0xa4, 0x75, 0x67, 0xce, 0xcf, 0x9a, 0xf5, 0xbc, 0x46, 0x23, 0x39, 0xeb, 0x30, 0x7d, 0x42, 0x12,
	0x16, 0xd2, 0x48, 0x9f, 0x14, 0x0a, 0xf9, 0x2f, 0x6e, 0x42, 0x43, 0x89, 0x88, 0x14, 0x6b, 0xe2,
	0x54, 0x15, 0x3f, 0xcb, 0x0a, 0x3f, 0x84, 0x69, 0x2f, 0x21, 0x2e, 0x27, 0xbe, 0xfe, 0xaf, 0xc8,
	0xc6, 0xb0, 0xa4, 0xf5, 0xad, 0xdc, 0xfa, 0xd6, 0x7e, 0x6e, 0xfd, 0x6e, 0xed, 0xd3, 0xf7, 0x26,
	0x72, 0x72, 0x42, 0xc6, 0x4d, 0x63, 0x5f, 0x70, 0xa7, 0xc6, 0xe5, 0x2a, 0x42, 0xc9, 0x41, 0xd3,
	0xbf, 0x71, 0xd0, 0x17, 0x04, 0xfa, 0x4e, 0xc8, 0xf8, 0xae, 0x74, 0xa7, 0xc4, 0xe4, 0x6e, 0x28,
	0x74, 0x1c, 0x95, 0x3a, 0x8e, 0x0f, 0xa1, 0x2e, 0x75, 0x86, 0x55, 0xdc, 0xcd, 0xaa, 0x98, 0x87,
	0xf9, 0x79, 0xd6, 0x5c, 0xff, 0x8b, 0x77, 0x62, 0x65, 0x7d, 0xc8, 0xf5, 0xcd, 0xb7, 0xb0, 0x58,
	0x71, 0x4b, 0x65, 0xb3, 0xc7, 0x30, 0x25, 0x81, 0xe2, 0x8e, 0x8d, 0xce, 0x72, 0x95, 0x6d, 0x72,
	0xd9, 0xa2, 0x84, 0x22, 0x9a, 0x9f, 0x11, 0x2c, 0x64, 0x01, 0xa4, 0x05, 0xfe, 0xa4, 0x0a, 0xe1,
	0xa5, 0x2a, 0x3c, 0x2b, 0x55, 0x61, 0xed, 0xe6, 0x53, 0xa7, 0x58, 0x84, 0x37, 0xb2, 0x55, 0xc5,
	0x3b, 0xaa, 0x1a, 0x3c, 0x2a, 0xd5, 0xe0, 0xee, 0x35, 0x4f, 0xa7, 0x20, 0xa0, 0x68, 0x9d, 0x6f,
	0x08, 0x1a, 0xf2, 0xe9, 0x6c, 0x66, 0x73, 0x1a, 0xef, 0x00, 0x6c, 0x11, 0xae, 0xa6, 0x13, 0xbe,
	0x6d, 0x5d, 0x9a, 0xe4, 0x56, 0x71, 0x72, 0x19, 0x8b, 0x15, 0xcf, 0x5b, 0x42, 0xda, 0x08, 0xbf,
	0x86, 0xf9, 0x4c, 0x6d, 0xf4, 0x69, 0x32, 0xdc, 0xaa, 0x12, 0x1d, 0x1d, 0x67, 0xc6, 0xd5, 0x08,
	0x25, 0xd2, 0x46, 0x9d, 0x1f, 0x08, 0x66, 0x65, 0x9c, 0x3d, 0x92, 0x64, 0x89, 0x61, 0x06, 0xf8,
	0x92, 0x59, 0x18, 0x5e, 0xa9, 0xd0, 0xba, 0xca, 0xf9, 0xc6, 0xea, 0x78, 0x60, 0x59, 0x7c, 0xf3,
	0x9f, 0x36, 0xc2, 0x31, 0xcc, 0x97, 0x9b, 0xc3, 0xf0, 0xbd, 0x2b, 0x64, 0x2a, 0x6c, 0x66, 0xac,
	0x8c, 0x85, 0xbd, 0x88, 0xd8, 0x21, 0x30, 0xa3, 0x06, 0xae, 0xec, 0xd8, 0x4b, 0xd1, 0x31, 0xb5,
	0x55, 0xd9, 0xb1, 0xe2, 0xb0, 0x37, 0xcc, 0xeb, 0x20, 0x32, 0x50, 0x1b, 0xf5, 0xa6, 0xc4, 0xc8,
	0x79, 0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xe3, 0x3d, 0xc2, 0xee, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigDiagsClient is the client API for ConfigDiags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigDiagsClient interface {
	//    option deprecated = true; Commented out for the moment - breaks static check
	// GetChanges returns a stream of submitted changes objects.
	GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (ConfigDiags_GetChangesClient, error)
	// GetConfigurations returns a stream of submitted configurations aimed at individual devices.
	GetConfigurations(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ConfigDiags_GetConfigurationsClient, error)
}

type configDiagsClient struct {
	cc *grpc.ClientConn
}

func NewConfigDiagsClient(cc *grpc.ClientConn) ConfigDiagsClient {
	return &configDiagsClient{cc}
}

func (c *configDiagsClient) GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (ConfigDiags_GetChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigDiags_serviceDesc.Streams[0], "/onos.config.diags.ConfigDiags/GetChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &configDiagsGetChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigDiags_GetChangesClient interface {
	Recv() (*admin.Change, error)
	grpc.ClientStream
}

type configDiagsGetChangesClient struct {
	grpc.ClientStream
}

func (x *configDiagsGetChangesClient) Recv() (*admin.Change, error) {
	m := new(admin.Change)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configDiagsClient) GetConfigurations(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ConfigDiags_GetConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigDiags_serviceDesc.Streams[1], "/onos.config.diags.ConfigDiags/GetConfigurations", opts...)
	if err != nil {
		return nil, err
	}
	x := &configDiagsGetConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigDiags_GetConfigurationsClient interface {
	Recv() (*Configuration, error)
	grpc.ClientStream
}

type configDiagsGetConfigurationsClient struct {
	grpc.ClientStream
}

func (x *configDiagsGetConfigurationsClient) Recv() (*Configuration, error) {
	m := new(Configuration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigDiagsServer is the server API for ConfigDiags service.
type ConfigDiagsServer interface {
	//    option deprecated = true; Commented out for the moment - breaks static check
	// GetChanges returns a stream of submitted changes objects.
	GetChanges(*ChangesRequest, ConfigDiags_GetChangesServer) error
	// GetConfigurations returns a stream of submitted configurations aimed at individual devices.
	GetConfigurations(*ConfigRequest, ConfigDiags_GetConfigurationsServer) error
}

// UnimplementedConfigDiagsServer can be embedded to have forward compatible implementations.
type UnimplementedConfigDiagsServer struct {
}

func (*UnimplementedConfigDiagsServer) GetChanges(req *ChangesRequest, srv ConfigDiags_GetChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChanges not implemented")
}
func (*UnimplementedConfigDiagsServer) GetConfigurations(req *ConfigRequest, srv ConfigDiags_GetConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}

func RegisterConfigDiagsServer(s *grpc.Server, srv ConfigDiagsServer) {
	s.RegisterService(&_ConfigDiags_serviceDesc, srv)
}

func _ConfigDiags_GetChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigDiagsServer).GetChanges(m, &configDiagsGetChangesServer{stream})
}

type ConfigDiags_GetChangesServer interface {
	Send(*admin.Change) error
	grpc.ServerStream
}

type configDiagsGetChangesServer struct {
	grpc.ServerStream
}

func (x *configDiagsGetChangesServer) Send(m *admin.Change) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigDiags_GetConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigDiagsServer).GetConfigurations(m, &configDiagsGetConfigurationsServer{stream})
}

type ConfigDiags_GetConfigurationsServer interface {
	Send(*Configuration) error
	grpc.ServerStream
}

type configDiagsGetConfigurationsServer struct {
	grpc.ServerStream
}

func (x *configDiagsGetConfigurationsServer) Send(m *Configuration) error {
	return x.ServerStream.SendMsg(m)
}

var _ConfigDiags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.config.diags.ConfigDiags",
	HandlerType: (*ConfigDiagsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChanges",
			Handler:       _ConfigDiags_GetChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfigurations",
			Handler:       _ConfigDiags_GetConfigurations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/northbound/diags/diags.proto",
}

// ChangeServiceClient is the client API for ChangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChangeServiceClient interface {
	// List gets a stream of network change add/update/remove events for network
	// changes matching changeid
	ListNetworkChanges(ctx context.Context, in *ListNetworkChangeRequest, opts ...grpc.CallOption) (ChangeService_ListNetworkChangesClient, error)
	// List gets a stream of device change add/update/remove events for device
	// changes matching changeid
	ListDeviceChanges(ctx context.Context, in *ListDeviceChangeRequest, opts ...grpc.CallOption) (ChangeService_ListDeviceChangesClient, error)
}

type changeServiceClient struct {
	cc *grpc.ClientConn
}

func NewChangeServiceClient(cc *grpc.ClientConn) ChangeServiceClient {
	return &changeServiceClient{cc}
}

func (c *changeServiceClient) ListNetworkChanges(ctx context.Context, in *ListNetworkChangeRequest, opts ...grpc.CallOption) (ChangeService_ListNetworkChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChangeService_serviceDesc.Streams[0], "/onos.config.diags.ChangeService/ListNetworkChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &changeServiceListNetworkChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChangeService_ListNetworkChangesClient interface {
	Recv() (*ListNetworkChangeResponse, error)
	grpc.ClientStream
}

type changeServiceListNetworkChangesClient struct {
	grpc.ClientStream
}

func (x *changeServiceListNetworkChangesClient) Recv() (*ListNetworkChangeResponse, error) {
	m := new(ListNetworkChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *changeServiceClient) ListDeviceChanges(ctx context.Context, in *ListDeviceChangeRequest, opts ...grpc.CallOption) (ChangeService_ListDeviceChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChangeService_serviceDesc.Streams[1], "/onos.config.diags.ChangeService/ListDeviceChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &changeServiceListDeviceChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChangeService_ListDeviceChangesClient interface {
	Recv() (*ListDeviceChangeResponse, error)
	grpc.ClientStream
}

type changeServiceListDeviceChangesClient struct {
	grpc.ClientStream
}

func (x *changeServiceListDeviceChangesClient) Recv() (*ListDeviceChangeResponse, error) {
	m := new(ListDeviceChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChangeServiceServer is the server API for ChangeService service.
type ChangeServiceServer interface {
	// List gets a stream of network change add/update/remove events for network
	// changes matching changeid
	ListNetworkChanges(*ListNetworkChangeRequest, ChangeService_ListNetworkChangesServer) error
	// List gets a stream of device change add/update/remove events for device
	// changes matching changeid
	ListDeviceChanges(*ListDeviceChangeRequest, ChangeService_ListDeviceChangesServer) error
}

// UnimplementedChangeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChangeServiceServer struct {
}

func (*UnimplementedChangeServiceServer) ListNetworkChanges(req *ListNetworkChangeRequest, srv ChangeService_ListNetworkChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworkChanges not implemented")
}
func (*UnimplementedChangeServiceServer) ListDeviceChanges(req *ListDeviceChangeRequest, srv ChangeService_ListDeviceChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeviceChanges not implemented")
}

func RegisterChangeServiceServer(s *grpc.Server, srv ChangeServiceServer) {
	s.RegisterService(&_ChangeService_serviceDesc, srv)
}

func _ChangeService_ListNetworkChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNetworkChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChangeServiceServer).ListNetworkChanges(m, &changeServiceListNetworkChangesServer{stream})
}

type ChangeService_ListNetworkChangesServer interface {
	Send(*ListNetworkChangeResponse) error
	grpc.ServerStream
}

type changeServiceListNetworkChangesServer struct {
	grpc.ServerStream
}

func (x *changeServiceListNetworkChangesServer) Send(m *ListNetworkChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChangeService_ListDeviceChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeviceChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChangeServiceServer).ListDeviceChanges(m, &changeServiceListDeviceChangesServer{stream})
}

type ChangeService_ListDeviceChangesServer interface {
	Send(*ListDeviceChangeResponse) error
	grpc.ServerStream
}

type changeServiceListDeviceChangesServer struct {
	grpc.ServerStream
}

func (x *changeServiceListDeviceChangesServer) Send(m *ListDeviceChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.config.diags.ChangeService",
	HandlerType: (*ChangeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNetworkChanges",
			Handler:       _ChangeService_ListNetworkChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDeviceChanges",
			Handler:       _ChangeService_ListDeviceChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/northbound/diags/diags.proto",
}

// OpStateDiagsClient is the client API for OpStateDiags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpStateDiagsClient interface {
	// GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices.
	// If subscribe is true keep on streaming after the initial set are finished
	GetOpState(ctx context.Context, in *OpStateRequest, opts ...grpc.CallOption) (OpStateDiags_GetOpStateClient, error)
}

type opStateDiagsClient struct {
	cc *grpc.ClientConn
}

func NewOpStateDiagsClient(cc *grpc.ClientConn) OpStateDiagsClient {
	return &opStateDiagsClient{cc}
}

func (c *opStateDiagsClient) GetOpState(ctx context.Context, in *OpStateRequest, opts ...grpc.CallOption) (OpStateDiags_GetOpStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpStateDiags_serviceDesc.Streams[0], "/onos.config.diags.OpStateDiags/GetOpState", opts...)
	if err != nil {
		return nil, err
	}
	x := &opStateDiagsGetOpStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpStateDiags_GetOpStateClient interface {
	Recv() (*OpStateResponse, error)
	grpc.ClientStream
}

type opStateDiagsGetOpStateClient struct {
	grpc.ClientStream
}

func (x *opStateDiagsGetOpStateClient) Recv() (*OpStateResponse, error) {
	m := new(OpStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpStateDiagsServer is the server API for OpStateDiags service.
type OpStateDiagsServer interface {
	// GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices.
	// If subscribe is true keep on streaming after the initial set are finished
	GetOpState(*OpStateRequest, OpStateDiags_GetOpStateServer) error
}

// UnimplementedOpStateDiagsServer can be embedded to have forward compatible implementations.
type UnimplementedOpStateDiagsServer struct {
}

func (*UnimplementedOpStateDiagsServer) GetOpState(req *OpStateRequest, srv OpStateDiags_GetOpStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOpState not implemented")
}

func RegisterOpStateDiagsServer(s *grpc.Server, srv OpStateDiagsServer) {
	s.RegisterService(&_OpStateDiags_serviceDesc, srv)
}

func _OpStateDiags_GetOpState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpStateDiagsServer).GetOpState(m, &opStateDiagsGetOpStateServer{stream})
}

type OpStateDiags_GetOpStateServer interface {
	Send(*OpStateResponse) error
	grpc.ServerStream
}

type opStateDiagsGetOpStateServer struct {
	grpc.ServerStream
}

func (x *opStateDiagsGetOpStateServer) Send(m *OpStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OpStateDiags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.config.diags.OpStateDiags",
	HandlerType: (*OpStateDiagsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOpState",
			Handler:       _OpStateDiags_GetOpState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/northbound/diags/diags.proto",
}
