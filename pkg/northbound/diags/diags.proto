/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.config.diags;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "github.com/onosproject/onos-config/pkg/northbound/admin/admin.proto";
import "github.com/onosproject/onos-config/pkg/types/change/device/types.proto";
import "github.com/onosproject/onos-config/pkg/types/change/network/types.proto";

// ChangesRequest is a message for specifying GetChanges query parameters.
message ChangesRequest {
//    option deprecated = true; Commented out for the moment - breaks static check
    repeated string change_ids = 1 [(gogoproto.customname) = "ChangeIDs"];
}

// ConfigRequest is a message for specifying GetConfigurations query parameters.
message ConfigRequest {
    //    option deprecated = true; Commented out for the moment - breaks static check
    repeated string device_ids = 1 [(gogoproto.customname) = "DeviceIDs"];
}

// OpStateRequest is a message for specifying GetOpState query parameters.
message OpStateRequest {
    // The request is always in the context of a Device ID. If the device does
    // not exist or is disconnected an error will be returned.
    string deviceId = 1;
    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all paths for the device have been streamed to the client
    bool subscribe = 2;
}

message OpStateResponse {
    // type is the type of the event
    onos.config.admin.Type type = 1;

    // device is the device on which the event occurred
    onos.config.change.device.PathValue pathvalue = 2;
}

// Configuration is a descriptor of a submitted configuration change targeted at a single device.
message Configuration {
    //    option deprecated = true; Commented out for the moment - breaks static check
    string name = 1;
    string device_id = 2 [(gogoproto.customname) = "DeviceID"];
    string version = 3;
    string device_type = 4;
    google.protobuf.Timestamp created = 5 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp updated = 6 [(gogoproto.stdtime) = true];
    repeated string change_ids = 7 [(gogoproto.customname) = "ChangeIDs"];
}

// ListNetworkChangeRequest requests a stream of changes and updates to them
// By default, the request requests a stream of all changes that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all changes have been sent and events that occur following the last changes will be
// streamed to the client until the stream is closed.
message ListNetworkChangeRequest {

    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all devices have been streamed to the client
    bool subscribe = 1;

    // option to specify a specific network change - if blank or '*' then select all
    // Can support `*` (match many chars) or '?' (match one char) as wildcard
    string changeid = 2 [(gogoproto.customname) = "ChangeID", (gogoproto.casttype) = "github.com/onosproject/onos-config/pkg/types/change/network.ID"];;
}

// ListNetworkChangeResponse carries a single network change event
message ListNetworkChangeResponse {

    // change is the network change on which the event occurred
    onos.config.change.network.NetworkChange change = 1;
}


// ListDeviceChangeRequest requests a stream of changes and updates to them
// By default, the request requests a stream of all changes that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all changes have been sent and events that occur following the last changes will be
// streamed to the client until the stream is closed.
message ListDeviceChangeRequest {

    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all devices have been streamed to the client
    bool subscribe = 1;

    // option to specify a specific device change - if blank or '*' then select all
    // Can support `*` (match many chars) or '?' (match one char) as wildcard
    string changeid = 2 [(gogoproto.customname) = "ChangeID", (gogoproto.casttype) = "github.com/onosproject/onos-config/pkg/types/change/device.ID"];
}

// ListDeviceChangeResponse carries a single network change event
message ListDeviceChangeResponse {

    // change is the device change on which the event occurred
    onos.config.change.device.DeviceChange change = 1;
}

// ConfigDiags provides means for obtaining diagnostic information about internal system state.
service ConfigDiags {
    //    option deprecated = true; Commented out for the moment - breaks static check
    // GetChanges returns a stream of submitted changes objects.
    rpc GetChanges (ChangesRequest) returns (stream onos.config.admin.Change);

    // GetConfigurations returns a stream of submitted configurations aimed at individual devices.
    rpc GetConfigurations (ConfigRequest) returns (stream Configuration);
}

service ChangeService {
    // List gets a stream of network change add/update/remove events for network
    // changes matching changeid
    rpc ListNetworkChanges (ListNetworkChangeRequest) returns (stream ListNetworkChangeResponse) {
    }

    // List gets a stream of device change add/update/remove events for device
    // changes matching changeid
    rpc ListDeviceChanges (ListDeviceChangeRequest) returns (stream ListDeviceChangeResponse) {
    }
}

// OpStateDiags provides means for obtaining diagnostic information about internal system state.
service OpStateDiags {
    // GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices.
    // If subscribe is true keep on streaming after the initial set are finished
    rpc GetOpState (OpStateRequest) returns (stream OpStateResponse);
}
