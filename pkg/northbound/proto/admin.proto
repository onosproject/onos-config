/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package proto;

import "google/protobuf/timestamp.proto";

// NetworkChangesRequest is a message for specifying GetNetworkChanges query parameters.
message NetworkChangesRequest {
}

// ConfigChange is a descriptor of a submitted configuration change targeted as a single device.
message ConfigChange {
    string id = 1;
    string hash = 2;
}

// NetChange is a descriptor of a configuration change submitted via gNMI.
message NetChange {
    google.protobuf.Timestamp time = 1;
    string name = 2;
    string user = 3;
    repeated ConfigChange changes = 4;
}

// RegisterRequest carries data for registering or unregistering a YANG model.
message RegisterRequest {
}

// RegisterResponse carries status of YANG model registration or unregistration.
message RegisterResponse {
}

// RollbackRequest carries the name of a network config to rollback. If there
// are subsequent changes to any of the devices in that config, the rollback will
// be rejected. If no name is given the last network change will be rolled back
message RollbackRequest {
    string name = 1;
    string comment = 2;
}

message RollbackResponse {
    string message = 1;
}

// AdminService provides means for enhanced interactions with the configuration subsystem.
service AdminService {
    // RegisterModel adds the specified YANG model to the list of supported models.
    rpc RegisterModel(RegisterRequest) returns (RegisterResponse);
    // UnregisterModel removes the specified YANG model from the list of supported models.
    rpc UnregisterModel(RegisterRequest) returns (RegisterResponse);

    // GetNetworkChanges returns a stream of network changes submitted via gNMI.
    rpc GetNetworkChanges(NetworkChangesRequest) returns (stream NetChange);

    rpc RollbackNetworkChange(RollbackRequest) returns (RollbackResponse);
}



