// Code generated by protoc-gen-gogo. DO NOT EDIT.
// Source: github.com/onosproject/onos-config/pkg/southbound (interfaces: TargetIf)

// Package mock_southbound is a generated GoMock package.
package synchronizer

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	southbound "github.com/onosproject/onos-config/pkg/southbound"
	device "github.com/onosproject/onos-topo/pkg/northbound/device"
	client "github.com/openconfig/gnmi/client"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	reflect "reflect"
)

// MockTargetIf is a mock of TargetIf interface
type MockTargetIf struct {
	ctrl     *gomock.Controller
	recorder *MockTargetIfMockRecorder
}

// MockTargetIfMockRecorder is the mock recorder for MockTargetIf
type MockTargetIfMockRecorder struct {
	mock *MockTargetIf
}

// NewMockTargetIf creates a new mock instance
func NewMockTargetIf(ctrl *gomock.Controller) *MockTargetIf {
	mock := &MockTargetIf{ctrl: ctrl}
	mock.recorder = &MockTargetIfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetIf) EXPECT() *MockTargetIfMockRecorder {
	return m.recorder
}

// CapabilitiesWithString mocks base method
func (m *MockTargetIf) CapabilitiesWithString(arg0 context.Context, arg1 string) (*gnmi.CapabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CapabilitiesWithString", arg0, arg1)
	ret0, _ := ret[0].(*gnmi.CapabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CapabilitiesWithString indicates an expected call of CapabilitiesWithString
func (mr *MockTargetIfMockRecorder) CapabilitiesWithString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CapabilitiesWithString", reflect.TypeOf((*MockTargetIf)(nil).CapabilitiesWithString), arg0, arg1)
}

// ConnectTarget mocks base method
func (m *MockTargetIf) ConnectTarget(arg0 context.Context, arg1 device.Device) (southbound.DeviceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectTarget", arg0, arg1)
	ret0, _ := ret[0].(southbound.DeviceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectTarget indicates an expected call of ConnectTarget
func (mr *MockTargetIfMockRecorder) ConnectTarget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectTarget", reflect.TypeOf((*MockTargetIf)(nil).ConnectTarget), arg0, arg1)
}

// Get mocks base method
func (m *MockTargetIf) Get(arg0 context.Context, arg1 *gnmi.GetRequest) (*gnmi.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*gnmi.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTargetIfMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTargetIf)(nil).Get), arg0, arg1)
}

// GetWithString mocks base method
func (m *MockTargetIf) GetWithString(arg0 context.Context, arg1 string) (*gnmi.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithString", arg0, arg1)
	ret0, _ := ret[0].(*gnmi.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithString indicates an expected call of GetWithString
func (mr *MockTargetIfMockRecorder) GetWithString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithString", reflect.TypeOf((*MockTargetIf)(nil).GetWithString), arg0, arg1)
}

// Set mocks base method
func (m *MockTargetIf) Set(arg0 context.Context, arg1 *gnmi.SetRequest) (*gnmi.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*gnmi.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockTargetIfMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTargetIf)(nil).Set), arg0, arg1)
}

// SetWithString mocks base method
func (m *MockTargetIf) SetWithString(arg0 context.Context, arg1 string) (*gnmi.SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithString", arg0, arg1)
	ret0, _ := ret[0].(*gnmi.SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWithString indicates an expected call of SetWithString
func (mr *MockTargetIfMockRecorder) SetWithString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithString", reflect.TypeOf((*MockTargetIf)(nil).SetWithString), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockTargetIf) Subscribe(arg0 context.Context, arg1 *gnmi.SubscribeRequest, arg2 client.ProtoHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockTargetIfMockRecorder) Subscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTargetIf)(nil).Subscribe), arg0, arg1, arg2)
}
