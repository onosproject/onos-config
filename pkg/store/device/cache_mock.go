// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/store/device/cache.go

// Package device is a generated GoMock package.
package device

import (
	gomock "github.com/golang/mock/gomock"
	device "github.com/onosproject/onos-config/pkg/types/device"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// GetDevicesByID mocks base method
func (m *MockCache) GetDevicesByID(id device.ID) []*Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByID", id)
	ret0, _ := ret[0].([]*Info)
	return ret0
}

// GetDevicesByID indicates an expected call of GetDevicesByID
func (mr *MockCacheMockRecorder) GetDevicesByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByID", reflect.TypeOf((*MockCache)(nil).GetDevicesByID), id)
}

// GetDevicesByType mocks base method
func (m *MockCache) GetDevicesByType(deviceType device.Type) []*Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByType", deviceType)
	ret0, _ := ret[0].([]*Info)
	return ret0
}

// GetDevicesByType indicates an expected call of GetDevicesByType
func (mr *MockCacheMockRecorder) GetDevicesByType(deviceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByType", reflect.TypeOf((*MockCache)(nil).GetDevicesByType), deviceType)
}

// GetDevicesByVersion mocks base method
func (m *MockCache) GetDevicesByVersion(deviceType device.Type, deviceVersion device.Version) []*Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByVersion", deviceType, deviceVersion)
	ret0, _ := ret[0].([]*Info)
	return ret0
}

// GetDevicesByVersion indicates an expected call of GetDevicesByVersion
func (mr *MockCacheMockRecorder) GetDevicesByVersion(deviceType, deviceVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByVersion", reflect.TypeOf((*MockCache)(nil).GetDevicesByVersion), deviceType, deviceVersion)
}

// GetDevices mocks base method
func (m *MockCache) GetDevices() []*Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices")
	ret0, _ := ret[0].([]*Info)
	return ret0
}

// GetDevices indicates an expected call of GetDevices
func (mr *MockCacheMockRecorder) GetDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockCache)(nil).GetDevices))
}
