// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/store/leadership/store.go

// Package store is a generated GoMock package.
package store

import (
	gomock "github.com/golang/mock/gomock"
	leadership "github.com/onosproject/onos-config/pkg/store/leadership"
	cluster "github.com/onosproject/onos-lib-go/pkg/cluster"
	reflect "reflect"
)

// MockLeadershipStore is a mock of Store interface
type MockLeadershipStore struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipStoreMockRecorder
}

// MockLeadershipStoreMockRecorder is the mock recorder for MockLeadershipStore
type MockLeadershipStoreMockRecorder struct {
	mock *MockLeadershipStore
}

// NewMockLeadershipStore creates a new mock instance
func NewMockLeadershipStore(ctrl *gomock.Controller) *MockLeadershipStore {
	mock := &MockLeadershipStore{ctrl: ctrl}
	mock.recorder = &MockLeadershipStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLeadershipStore) EXPECT() *MockLeadershipStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockLeadershipStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLeadershipStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLeadershipStore)(nil).Close))
}

// NodeID mocks base method
func (m *MockLeadershipStore) NodeID() cluster.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(cluster.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID
func (mr *MockLeadershipStoreMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockLeadershipStore)(nil).NodeID))
}

// IsLeader mocks base method
func (m *MockLeadershipStore) IsLeader() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeader")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeader indicates an expected call of IsLeader
func (mr *MockLeadershipStoreMockRecorder) IsLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockLeadershipStore)(nil).IsLeader))
}

// Watch mocks base method
func (m *MockLeadershipStore) Watch(arg0 chan<- leadership.Leadership) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (mr *MockLeadershipStoreMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockLeadershipStore)(nil).Watch), arg0)
}
